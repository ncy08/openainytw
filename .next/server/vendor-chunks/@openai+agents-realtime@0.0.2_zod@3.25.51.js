"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@openai+agents-realtime@0.0.2_zod@3.25.51";
exports.ids = ["vendor-chunks/@openai+agents-realtime@0.0.2_zod@3.25.51"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/guardrail.mjs":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/guardrail.mjs ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defineRealtimeOutputGuardrail: () => (/* binding */ defineRealtimeOutputGuardrail),\n/* harmony export */   getRealtimeGuardrailFeedbackMessage: () => (/* binding */ getRealtimeGuardrailFeedbackMessage),\n/* harmony export */   getRealtimeGuardrailSettings: () => (/* binding */ getRealtimeGuardrailSettings)\n/* harmony export */ });\n/* harmony import */ var _openai_agents_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @openai/agents-core */ \"(ssr)/./node_modules/.pnpm/@openai+agents-core@0.0.2_ws@8.18.2_zod@3.25.51/node_modules/@openai/agents-core/dist/index.mjs\");\n\nfunction getRealtimeGuardrailSettings(settings) {\n    return {\n        debounceTextLength: settings.debounceTextLength ?? 100,\n    };\n}\nfunction defineRealtimeOutputGuardrail({ policyHint: policyHintInput, ...options }) {\n    const baseGuardrail = (0,_openai_agents_core__WEBPACK_IMPORTED_MODULE_0__.defineOutputGuardrail)(options);\n    const policyHint = policyHintInput ?? baseGuardrail.name;\n    return {\n        ...baseGuardrail,\n        policyHint,\n        run: async (args) => {\n            const result = await baseGuardrail.run(args);\n            return {\n                ...result,\n                guardrail: { ...result.guardrail, policyHint },\n            };\n        },\n    };\n}\n/**\n * Generates a message that informs the model about why the guardrail was triggered and to\n * correct the behavior.\n */\nfunction getRealtimeGuardrailFeedbackMessage(result) {\n    return `\n⚠️ Your last answer was blocked. \nFailed Guardrail Reason: ${result.guardrail.policyHint}. \nFailure Details: ${JSON.stringify(result.output.outputInfo ?? {})}. \nPlease respond again following policy. Apologize for not being able to answer the question (while avoiding the specific reason) and divert discussion back to an approved topic immediately and not invite more discussion.\n`.trim();\n}\n//# sourceMappingURL=guardrail.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW5haSthZ2VudHMtcmVhbHRpbWVAMC4wLjJfem9kQDMuMjUuNTEvbm9kZV9tb2R1bGVzL0BvcGVuYWkvYWdlbnRzLXJlYWx0aW1lL2Rpc3QvZ3VhcmRyYWlsLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTZEO0FBQ3REO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTyx5Q0FBeUMseUNBQXlDO0FBQ3pGLDBCQUEwQiwwRUFBcUI7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixpQ0FBaUM7QUFDOUQ7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EsMkJBQTJCLDRCQUE0QjtBQUN2RCxtQkFBbUIsNkNBQTZDLEVBQUU7QUFDbEU7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuYWlueXR3Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVuYWkrYWdlbnRzLXJlYWx0aW1lQDAuMC4yX3pvZEAzLjI1LjUxL25vZGVfbW9kdWxlcy9Ab3BlbmFpL2FnZW50cy1yZWFsdGltZS9kaXN0L2d1YXJkcmFpbC5tanM/YmE2YiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWZpbmVPdXRwdXRHdWFyZHJhaWwsIH0gZnJvbSAnQG9wZW5haS9hZ2VudHMtY29yZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVhbHRpbWVHdWFyZHJhaWxTZXR0aW5ncyhzZXR0aW5ncykge1xuICAgIHJldHVybiB7XG4gICAgICAgIGRlYm91bmNlVGV4dExlbmd0aDogc2V0dGluZ3MuZGVib3VuY2VUZXh0TGVuZ3RoID8/IDEwMCxcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRlZmluZVJlYWx0aW1lT3V0cHV0R3VhcmRyYWlsKHsgcG9saWN5SGludDogcG9saWN5SGludElucHV0LCAuLi5vcHRpb25zIH0pIHtcbiAgICBjb25zdCBiYXNlR3VhcmRyYWlsID0gZGVmaW5lT3V0cHV0R3VhcmRyYWlsKG9wdGlvbnMpO1xuICAgIGNvbnN0IHBvbGljeUhpbnQgPSBwb2xpY3lIaW50SW5wdXQgPz8gYmFzZUd1YXJkcmFpbC5uYW1lO1xuICAgIHJldHVybiB7XG4gICAgICAgIC4uLmJhc2VHdWFyZHJhaWwsXG4gICAgICAgIHBvbGljeUhpbnQsXG4gICAgICAgIHJ1bjogYXN5bmMgKGFyZ3MpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGJhc2VHdWFyZHJhaWwucnVuKGFyZ3MpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5yZXN1bHQsXG4gICAgICAgICAgICAgICAgZ3VhcmRyYWlsOiB7IC4uLnJlc3VsdC5ndWFyZHJhaWwsIHBvbGljeUhpbnQgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8qKlxuICogR2VuZXJhdGVzIGEgbWVzc2FnZSB0aGF0IGluZm9ybXMgdGhlIG1vZGVsIGFib3V0IHdoeSB0aGUgZ3VhcmRyYWlsIHdhcyB0cmlnZ2VyZWQgYW5kIHRvXG4gKiBjb3JyZWN0IHRoZSBiZWhhdmlvci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFJlYWx0aW1lR3VhcmRyYWlsRmVlZGJhY2tNZXNzYWdlKHJlc3VsdCkge1xuICAgIHJldHVybiBgXG7imqDvuI8gWW91ciBsYXN0IGFuc3dlciB3YXMgYmxvY2tlZC4gXG5GYWlsZWQgR3VhcmRyYWlsIFJlYXNvbjogJHtyZXN1bHQuZ3VhcmRyYWlsLnBvbGljeUhpbnR9LiBcbkZhaWx1cmUgRGV0YWlsczogJHtKU09OLnN0cmluZ2lmeShyZXN1bHQub3V0cHV0Lm91dHB1dEluZm8gPz8ge30pfS4gXG5QbGVhc2UgcmVzcG9uZCBhZ2FpbiBmb2xsb3dpbmcgcG9saWN5LiBBcG9sb2dpemUgZm9yIG5vdCBiZWluZyBhYmxlIHRvIGFuc3dlciB0aGUgcXVlc3Rpb24gKHdoaWxlIGF2b2lkaW5nIHRoZSBzcGVjaWZpYyByZWFzb24pIGFuZCBkaXZlcnQgZGlzY3Vzc2lvbiBiYWNrIHRvIGFuIGFwcHJvdmVkIHRvcGljIGltbWVkaWF0ZWx5IGFuZCBub3QgaW52aXRlIG1vcmUgZGlzY3Vzc2lvbi5cbmAudHJpbSgpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z3VhcmRyYWlsLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/guardrail.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/index.mjs":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/index.mjs ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_OPENAI_REALTIME_MODEL: () => (/* reexport safe */ _openaiRealtimeBase_mjs__WEBPACK_IMPORTED_MODULE_5__.DEFAULT_OPENAI_REALTIME_MODEL),\n/* harmony export */   DEFAULT_OPENAI_REALTIME_SESSION_CONFIG: () => (/* reexport safe */ _openaiRealtimeBase_mjs__WEBPACK_IMPORTED_MODULE_5__.DEFAULT_OPENAI_REALTIME_SESSION_CONFIG),\n/* harmony export */   ModelBehaviorError: () => (/* reexport safe */ _openai_agents_core__WEBPACK_IMPORTED_MODULE_6__.ModelBehaviorError),\n/* harmony export */   OpenAIRealtimeBase: () => (/* reexport safe */ _openaiRealtimeBase_mjs__WEBPACK_IMPORTED_MODULE_5__.OpenAIRealtimeBase),\n/* harmony export */   OpenAIRealtimeWebRTC: () => (/* reexport safe */ _openaiRealtimeWebRtc_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIRealtimeWebRTC),\n/* harmony export */   OpenAIRealtimeWebSocket: () => (/* reexport safe */ _openaiRealtimeWebsocket_mjs__WEBPACK_IMPORTED_MODULE_4__.OpenAIRealtimeWebSocket),\n/* harmony export */   OutputGuardrailTripwireTriggered: () => (/* reexport safe */ _openai_agents_core__WEBPACK_IMPORTED_MODULE_6__.OutputGuardrailTripwireTriggered),\n/* harmony export */   RealtimeAgent: () => (/* reexport safe */ _realtimeAgent_mjs__WEBPACK_IMPORTED_MODULE_1__.RealtimeAgent),\n/* harmony export */   RealtimeSession: () => (/* reexport safe */ _realtimeSession_mjs__WEBPACK_IMPORTED_MODULE_2__.RealtimeSession),\n/* harmony export */   UserError: () => (/* reexport safe */ _openai_agents_core__WEBPACK_IMPORTED_MODULE_6__.UserError),\n/* harmony export */   tool: () => (/* reexport safe */ _openai_agents_core__WEBPACK_IMPORTED_MODULE_6__.tool),\n/* harmony export */   utils: () => (/* binding */ utils)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/utils.mjs\");\n/* harmony import */ var _realtimeAgent_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./realtimeAgent.mjs */ \"(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/realtimeAgent.mjs\");\n/* harmony import */ var _realtimeSession_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./realtimeSession.mjs */ \"(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/realtimeSession.mjs\");\n/* harmony import */ var _openaiRealtimeWebRtc_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./openaiRealtimeWebRtc.mjs */ \"(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/openaiRealtimeWebRtc.mjs\");\n/* harmony import */ var _openaiRealtimeWebsocket_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./openaiRealtimeWebsocket.mjs */ \"(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/openaiRealtimeWebsocket.mjs\");\n/* harmony import */ var _openaiRealtimeBase_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./openaiRealtimeBase.mjs */ \"(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/openaiRealtimeBase.mjs\");\n/* harmony import */ var _openai_agents_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @openai/agents-core */ \"(ssr)/./node_modules/.pnpm/@openai+agents-core@0.0.2_ws@8.18.2_zod@3.25.51/node_modules/@openai/agents-core/dist/index.mjs\");\n\n\n\n\n\n\nconst utils = {\n    base64ToArrayBuffer: _utils_mjs__WEBPACK_IMPORTED_MODULE_0__.base64ToArrayBuffer,\n    arrayBufferToBase64: _utils_mjs__WEBPACK_IMPORTED_MODULE_0__.arrayBufferToBase64,\n    getLastTextFromAudioOutputMessage: _utils_mjs__WEBPACK_IMPORTED_MODULE_0__.getLastTextFromAudioOutputMessage,\n};\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW5haSthZ2VudHMtcmVhbHRpbWVAMC4wLjJfem9kQDMuMjUuNTEvbm9kZV9tb2R1bGVzL0BvcGVuYWkvYWdlbnRzLXJlYWx0aW1lL2Rpc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBMEM7QUFDVTtBQUNLO0FBQ1U7QUFDTTtBQUM2RDtBQUMvSDtBQUNQLHlCQUF5QiwyREFBOEI7QUFDdkQseUJBQXlCLDJEQUE4QjtBQUN2RCx1Q0FBdUMseUVBQTRDO0FBQ25GO0FBQzZHO0FBQzdHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmFpbnl0dy8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbmFpK2FnZW50cy1yZWFsdGltZUAwLjAuMl96b2RAMy4yNS41MS9ub2RlX21vZHVsZXMvQG9wZW5haS9hZ2VudHMtcmVhbHRpbWUvZGlzdC9pbmRleC5tanM/NDhlMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB1dGlsSW1wb3J0IGZyb20gXCIuL3V0aWxzLm1qc1wiO1xuZXhwb3J0IHsgUmVhbHRpbWVBZ2VudCB9IGZyb20gXCIuL3JlYWx0aW1lQWdlbnQubWpzXCI7XG5leHBvcnQgeyBSZWFsdGltZVNlc3Npb24sIH0gZnJvbSBcIi4vcmVhbHRpbWVTZXNzaW9uLm1qc1wiO1xuZXhwb3J0IHsgT3BlbkFJUmVhbHRpbWVXZWJSVEMsIH0gZnJvbSBcIi4vb3BlbmFpUmVhbHRpbWVXZWJSdGMubWpzXCI7XG5leHBvcnQgeyBPcGVuQUlSZWFsdGltZVdlYlNvY2tldCwgfSBmcm9tIFwiLi9vcGVuYWlSZWFsdGltZVdlYnNvY2tldC5tanNcIjtcbmV4cG9ydCB7IE9wZW5BSVJlYWx0aW1lQmFzZSwgREVGQVVMVF9PUEVOQUlfUkVBTFRJTUVfTU9ERUwsIERFRkFVTFRfT1BFTkFJX1JFQUxUSU1FX1NFU1NJT05fQ09ORklHLCB9IGZyb20gXCIuL29wZW5haVJlYWx0aW1lQmFzZS5tanNcIjtcbmV4cG9ydCBjb25zdCB1dGlscyA9IHtcbiAgICBiYXNlNjRUb0FycmF5QnVmZmVyOiB1dGlsSW1wb3J0LmJhc2U2NFRvQXJyYXlCdWZmZXIsXG4gICAgYXJyYXlCdWZmZXJUb0Jhc2U2NDogdXRpbEltcG9ydC5hcnJheUJ1ZmZlclRvQmFzZTY0LFxuICAgIGdldExhc3RUZXh0RnJvbUF1ZGlvT3V0cHV0TWVzc2FnZTogdXRpbEltcG9ydC5nZXRMYXN0VGV4dEZyb21BdWRpb091dHB1dE1lc3NhZ2UsXG59O1xuZXhwb3J0IHsgTW9kZWxCZWhhdmlvckVycm9yLCBPdXRwdXRHdWFyZHJhaWxUcmlwd2lyZVRyaWdnZXJlZCwgdG9vbCwgVXNlckVycm9yLCB9IGZyb20gJ0BvcGVuYWkvYWdlbnRzLWNvcmUnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/items.mjs":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/items.mjs ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   baseItemSchema: () => (/* binding */ baseItemSchema),\n/* harmony export */   realtimeMessageItemSchema: () => (/* binding */ realtimeMessageItemSchema),\n/* harmony export */   realtimeToolCallItem: () => (/* binding */ realtimeToolCallItem)\n/* harmony export */ });\n/* harmony import */ var _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @openai/zod/v3 */ \"(ssr)/./node_modules/.pnpm/zod@3.25.51/node_modules/zod/dist/esm/index.js\");\n\nconst baseItemSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    itemId: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n});\nconst realtimeMessageItemSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.discriminatedUnion('role', [\n    _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        itemId: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n        previousItemId: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().nullable().optional(),\n        type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('message'),\n        role: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('system'),\n        content: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.array(_openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({ type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('input_text'), text: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string() })),\n    }),\n    _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        itemId: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n        previousItemId: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().nullable().optional(),\n        type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('message'),\n        role: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('user'),\n        status: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"](['in_progress', 'completed']),\n        content: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.array(_openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({ type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('input_text'), text: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string() }).or(_openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n            type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('input_audio'),\n            audio: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().nullable().optional(),\n            transcript: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().nullable(),\n        }))),\n    }),\n    _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        itemId: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n        previousItemId: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().nullable().optional(),\n        type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('message'),\n        role: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('assistant'),\n        status: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"](['in_progress', 'completed', 'incomplete']),\n        content: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.array(_openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({ type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('text'), text: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string() }).or(_openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n            type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('audio'),\n            audio: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().nullable().optional(),\n            transcript: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().nullable().optional(),\n        }))),\n    }),\n]);\nconst realtimeToolCallItem = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    itemId: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    previousItemId: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().nullable().optional(),\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('function_call'),\n    status: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"](['in_progress', 'completed']),\n    arguments: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    name: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    output: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().nullable(),\n});\n//# sourceMappingURL=items.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW5haSthZ2VudHMtcmVhbHRpbWVAMC4wLjJfem9kQDMuMjUuNTEvbm9kZV9tb2R1bGVzL0BvcGVuYWkvYWdlbnRzLXJlYWx0aW1lL2Rpc3QvaXRlbXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBbUM7QUFDNUIsdUJBQXVCLG9EQUFRO0FBQ3RDLFlBQVksb0RBQVE7QUFDcEIsQ0FBQztBQUNNLGtDQUFrQyxnRUFBb0I7QUFDN0QsSUFBSSxvREFBUTtBQUNaLGdCQUFnQixvREFBUTtBQUN4Qix3QkFBd0Isb0RBQVE7QUFDaEMsY0FBYyxxREFBUztBQUN2QixjQUFjLHFEQUFTO0FBQ3ZCLGlCQUFpQixtREFBTyxDQUFDLG9EQUFRLEdBQUcsTUFBTSxxREFBUyxzQkFBc0Isb0RBQVEsSUFBSTtBQUNyRixLQUFLO0FBQ0wsSUFBSSxvREFBUTtBQUNaLGdCQUFnQixvREFBUTtBQUN4Qix3QkFBd0Isb0RBQVE7QUFDaEMsY0FBYyxxREFBUztBQUN2QixjQUFjLHFEQUFTO0FBQ3ZCLGdCQUFnQixxREFBTTtBQUN0QixpQkFBaUIsbURBQU8sQ0FBQyxvREFBUSxHQUFHLE1BQU0scURBQVMsc0JBQXNCLG9EQUFRLElBQUksS0FBSyxvREFBUTtBQUNsRyxrQkFBa0IscURBQVM7QUFDM0IsbUJBQW1CLG9EQUFRO0FBQzNCLHdCQUF3QixvREFBUTtBQUNoQyxTQUFTO0FBQ1QsS0FBSztBQUNMLElBQUksb0RBQVE7QUFDWixnQkFBZ0Isb0RBQVE7QUFDeEIsd0JBQXdCLG9EQUFRO0FBQ2hDLGNBQWMscURBQVM7QUFDdkIsY0FBYyxxREFBUztBQUN2QixnQkFBZ0IscURBQU07QUFDdEIsaUJBQWlCLG1EQUFPLENBQUMsb0RBQVEsR0FBRyxNQUFNLHFEQUFTLGdCQUFnQixvREFBUSxJQUFJLEtBQUssb0RBQVE7QUFDNUYsa0JBQWtCLHFEQUFTO0FBQzNCLG1CQUFtQixvREFBUTtBQUMzQix3QkFBd0Isb0RBQVE7QUFDaEMsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPLDZCQUE2QixvREFBUTtBQUM1QyxZQUFZLG9EQUFRO0FBQ3BCLG9CQUFvQixvREFBUTtBQUM1QixVQUFVLHFEQUFTO0FBQ25CLFlBQVkscURBQU07QUFDbEIsZUFBZSxvREFBUTtBQUN2QixVQUFVLG9EQUFRO0FBQ2xCLFlBQVksb0RBQVE7QUFDcEIsQ0FBQztBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmFpbnl0dy8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbmFpK2FnZW50cy1yZWFsdGltZUAwLjAuMl96b2RAMy4yNS41MS9ub2RlX21vZHVsZXMvQG9wZW5haS9hZ2VudHMtcmVhbHRpbWUvZGlzdC9pdGVtcy5tanM/ZDgxMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB6IH0gZnJvbSAnQG9wZW5haS96b2QvdjMnO1xuZXhwb3J0IGNvbnN0IGJhc2VJdGVtU2NoZW1hID0gei5vYmplY3Qoe1xuICAgIGl0ZW1JZDogei5zdHJpbmcoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IHJlYWx0aW1lTWVzc2FnZUl0ZW1TY2hlbWEgPSB6LmRpc2NyaW1pbmF0ZWRVbmlvbigncm9sZScsIFtcbiAgICB6Lm9iamVjdCh7XG4gICAgICAgIGl0ZW1JZDogei5zdHJpbmcoKSxcbiAgICAgICAgcHJldmlvdXNJdGVtSWQ6IHouc3RyaW5nKCkubnVsbGFibGUoKS5vcHRpb25hbCgpLFxuICAgICAgICB0eXBlOiB6LmxpdGVyYWwoJ21lc3NhZ2UnKSxcbiAgICAgICAgcm9sZTogei5saXRlcmFsKCdzeXN0ZW0nKSxcbiAgICAgICAgY29udGVudDogei5hcnJheSh6Lm9iamVjdCh7IHR5cGU6IHoubGl0ZXJhbCgnaW5wdXRfdGV4dCcpLCB0ZXh0OiB6LnN0cmluZygpIH0pKSxcbiAgICB9KSxcbiAgICB6Lm9iamVjdCh7XG4gICAgICAgIGl0ZW1JZDogei5zdHJpbmcoKSxcbiAgICAgICAgcHJldmlvdXNJdGVtSWQ6IHouc3RyaW5nKCkubnVsbGFibGUoKS5vcHRpb25hbCgpLFxuICAgICAgICB0eXBlOiB6LmxpdGVyYWwoJ21lc3NhZ2UnKSxcbiAgICAgICAgcm9sZTogei5saXRlcmFsKCd1c2VyJyksXG4gICAgICAgIHN0YXR1czogei5lbnVtKFsnaW5fcHJvZ3Jlc3MnLCAnY29tcGxldGVkJ10pLFxuICAgICAgICBjb250ZW50OiB6LmFycmF5KHoub2JqZWN0KHsgdHlwZTogei5saXRlcmFsKCdpbnB1dF90ZXh0JyksIHRleHQ6IHouc3RyaW5nKCkgfSkub3Ioei5vYmplY3Qoe1xuICAgICAgICAgICAgdHlwZTogei5saXRlcmFsKCdpbnB1dF9hdWRpbycpLFxuICAgICAgICAgICAgYXVkaW86IHouc3RyaW5nKCkubnVsbGFibGUoKS5vcHRpb25hbCgpLFxuICAgICAgICAgICAgdHJhbnNjcmlwdDogei5zdHJpbmcoKS5udWxsYWJsZSgpLFxuICAgICAgICB9KSkpLFxuICAgIH0pLFxuICAgIHoub2JqZWN0KHtcbiAgICAgICAgaXRlbUlkOiB6LnN0cmluZygpLFxuICAgICAgICBwcmV2aW91c0l0ZW1JZDogei5zdHJpbmcoKS5udWxsYWJsZSgpLm9wdGlvbmFsKCksXG4gICAgICAgIHR5cGU6IHoubGl0ZXJhbCgnbWVzc2FnZScpLFxuICAgICAgICByb2xlOiB6LmxpdGVyYWwoJ2Fzc2lzdGFudCcpLFxuICAgICAgICBzdGF0dXM6IHouZW51bShbJ2luX3Byb2dyZXNzJywgJ2NvbXBsZXRlZCcsICdpbmNvbXBsZXRlJ10pLFxuICAgICAgICBjb250ZW50OiB6LmFycmF5KHoub2JqZWN0KHsgdHlwZTogei5saXRlcmFsKCd0ZXh0JyksIHRleHQ6IHouc3RyaW5nKCkgfSkub3Ioei5vYmplY3Qoe1xuICAgICAgICAgICAgdHlwZTogei5saXRlcmFsKCdhdWRpbycpLFxuICAgICAgICAgICAgYXVkaW86IHouc3RyaW5nKCkubnVsbGFibGUoKS5vcHRpb25hbCgpLFxuICAgICAgICAgICAgdHJhbnNjcmlwdDogei5zdHJpbmcoKS5udWxsYWJsZSgpLm9wdGlvbmFsKCksXG4gICAgICAgIH0pKSksXG4gICAgfSksXG5dKTtcbmV4cG9ydCBjb25zdCByZWFsdGltZVRvb2xDYWxsSXRlbSA9IHoub2JqZWN0KHtcbiAgICBpdGVtSWQ6IHouc3RyaW5nKCksXG4gICAgcHJldmlvdXNJdGVtSWQ6IHouc3RyaW5nKCkubnVsbGFibGUoKS5vcHRpb25hbCgpLFxuICAgIHR5cGU6IHoubGl0ZXJhbCgnZnVuY3Rpb25fY2FsbCcpLFxuICAgIHN0YXR1czogei5lbnVtKFsnaW5fcHJvZ3Jlc3MnLCAnY29tcGxldGVkJ10pLFxuICAgIGFyZ3VtZW50czogei5zdHJpbmcoKSxcbiAgICBuYW1lOiB6LnN0cmluZygpLFxuICAgIG91dHB1dDogei5zdHJpbmcoKS5udWxsYWJsZSgpLFxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pdGVtcy5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/items.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/logger.mjs":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/logger.mjs ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _openai_agents_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @openai/agents-core */ \"(ssr)/./node_modules/.pnpm/@openai+agents-core@0.0.2_ws@8.18.2_zod@3.25.51/node_modules/@openai/agents-core/dist/index.mjs\");\n\nconst logger = (0,_openai_agents_core__WEBPACK_IMPORTED_MODULE_0__.getLogger)('openai-agents:realtime');\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (logger);\n//# sourceMappingURL=logger.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW5haSthZ2VudHMtcmVhbHRpbWVAMC4wLjJfem9kQDMuMjUuNTEvbm9kZV9tb2R1bGVzL0BvcGVuYWkvYWdlbnRzLXJlYWx0aW1lL2Rpc3QvbG9nZ2VyLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFnRDtBQUNoRCxlQUFlLDhEQUFTO0FBQ3hCLGlFQUFlLE1BQU0sRUFBQztBQUN0QiIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5haW55dHcvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW5haSthZ2VudHMtcmVhbHRpbWVAMC4wLjJfem9kQDMuMjUuNTEvbm9kZV9tb2R1bGVzL0BvcGVuYWkvYWdlbnRzLXJlYWx0aW1lL2Rpc3QvbG9nZ2VyLm1qcz8yMGM0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldExvZ2dlciB9IGZyb20gJ0BvcGVuYWkvYWdlbnRzLWNvcmUnO1xuY29uc3QgbG9nZ2VyID0gZ2V0TG9nZ2VyKCdvcGVuYWktYWdlbnRzOnJlYWx0aW1lJyk7XG5leHBvcnQgZGVmYXVsdCBsb2dnZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2dnZXIubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/logger.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/metadata.mjs":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/metadata.mjs ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   METADATA: () => (/* binding */ METADATA),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// This file is automatically generated\nconst METADATA = {\n    \"name\": \"@openai/agents-realtime\",\n    \"version\": \"0.0.2\",\n    \"versions\": {\n        \"@openai/agents-realtime\": \"0.0.2\",\n        \"@openai/agents-core\": \"workspace:*\"\n    }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (METADATA);\n//# sourceMappingURL=metadata.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW5haSthZ2VudHMtcmVhbHRpbWVAMC4wLjJfem9kQDMuMjUuNTEvbm9kZV9tb2R1bGVzL0BvcGVuYWkvYWdlbnRzLXJlYWx0aW1lL2Rpc3QvbWV0YWRhdGEubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWUsUUFBUSxFQUFDO0FBQ3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmFpbnl0dy8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbmFpK2FnZW50cy1yZWFsdGltZUAwLjAuMl96b2RAMy4yNS41MS9ub2RlX21vZHVsZXMvQG9wZW5haS9hZ2VudHMtcmVhbHRpbWUvZGlzdC9tZXRhZGF0YS5tanM/Yjc3MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGZpbGUgaXMgYXV0b21hdGljYWxseSBnZW5lcmF0ZWRcbmV4cG9ydCBjb25zdCBNRVRBREFUQSA9IHtcbiAgICBcIm5hbWVcIjogXCJAb3BlbmFpL2FnZW50cy1yZWFsdGltZVwiLFxuICAgIFwidmVyc2lvblwiOiBcIjAuMC4yXCIsXG4gICAgXCJ2ZXJzaW9uc1wiOiB7XG4gICAgICAgIFwiQG9wZW5haS9hZ2VudHMtcmVhbHRpbWVcIjogXCIwLjAuMlwiLFxuICAgICAgICBcIkBvcGVuYWkvYWdlbnRzLWNvcmVcIjogXCJ3b3Jrc3BhY2U6KlwiXG4gICAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IE1FVEFEQVRBO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWV0YWRhdGEubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/metadata.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/openaiRealtimeBase.mjs":
/*!***************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/openaiRealtimeBase.mjs ***!
  \***************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_OPENAI_REALTIME_MODEL: () => (/* binding */ DEFAULT_OPENAI_REALTIME_MODEL),\n/* harmony export */   DEFAULT_OPENAI_REALTIME_SESSION_CONFIG: () => (/* binding */ DEFAULT_OPENAI_REALTIME_SESSION_CONFIG),\n/* harmony export */   OpenAIRealtimeBase: () => (/* binding */ OpenAIRealtimeBase)\n/* harmony export */ });\n/* harmony import */ var _openai_agents_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @openai/agents-core */ \"(ssr)/./node_modules/.pnpm/@openai+agents-core@0.0.2_ws@8.18.2_zod@3.25.51/node_modules/@openai/agents-core/dist/index.mjs\");\n/* harmony import */ var _items_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./items.mjs */ \"(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/items.mjs\");\n/* harmony import */ var _logger_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./logger.mjs */ \"(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/logger.mjs\");\n/* harmony import */ var _openaiRealtimeEvents_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./openaiRealtimeEvents.mjs */ \"(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/openaiRealtimeEvents.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/utils.mjs\");\n/* harmony import */ var _openai_agents_core_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @openai/agents-core/utils */ \"(ssr)/./node_modules/.pnpm/@openai+agents-core@0.0.2_ws@8.18.2_zod@3.25.51/node_modules/@openai/agents-core/dist/utils/index.mjs\");\n\n\n\n\n\n\n/**\n * The default model that is used during the connection if no model is provided.\n */\nconst DEFAULT_OPENAI_REALTIME_MODEL = 'gpt-4o-realtime-preview';\n/**\n * The default session config that gets send over during session connection unless overriden\n * by the user.\n */\nconst DEFAULT_OPENAI_REALTIME_SESSION_CONFIG = {\n    voice: 'ash',\n    modalities: ['text', 'audio'],\n    inputAudioFormat: 'pcm16',\n    outputAudioFormat: 'pcm16',\n    inputAudioTranscription: {\n        model: 'gpt-4o-mini-transcribe',\n    },\n    turnDetection: {\n        type: 'semantic_vad',\n    },\n};\nclass OpenAIRealtimeBase extends _openai_agents_core_utils__WEBPACK_IMPORTED_MODULE_5__.EventEmitterDelegate {\n    #model;\n    #apiKey;\n    #tracingConfig = null;\n    eventEmitter = new _openai_agents_core__WEBPACK_IMPORTED_MODULE_0__.RuntimeEventEmitter();\n    constructor(options = {}) {\n        super();\n        this.#model = options.model ?? DEFAULT_OPENAI_REALTIME_MODEL;\n        this.#apiKey = options.apiKey;\n    }\n    /**\n     * The current model that is being used by the transport layer.\n     */\n    get currentModel() {\n        return this.#model;\n    }\n    /**\n     * The current model that is being used by the transport layer.\n     * **Note**: The model cannot be changed mid conversation.\n     */\n    set currentModel(model) {\n        this.#model = model;\n    }\n    async _getApiKey(options) {\n        const apiKey = options.apiKey ?? this.#apiKey;\n        if (typeof apiKey === 'function') {\n            return await apiKey();\n        }\n        return apiKey;\n    }\n    _onMessage(event) {\n        const { data: parsed, isGeneric } = (0,_openaiRealtimeEvents_mjs__WEBPACK_IMPORTED_MODULE_3__.parseRealtimeEvent)(event);\n        if (parsed === null) {\n            return;\n        }\n        this.emit('*', parsed);\n        if (isGeneric) {\n            return;\n        }\n        if (parsed.type === 'error') {\n            this.emit('error', { type: 'error', error: parsed });\n        }\n        else {\n            this.emit(parsed.type, parsed);\n        }\n        if (parsed.type === 'response.created') {\n            this.emit('turn_started', {\n                type: 'response_started',\n                providerData: {\n                    ...parsed,\n                },\n            });\n            return;\n        }\n        if (parsed.type === 'response.done') {\n            const response = _openaiRealtimeEvents_mjs__WEBPACK_IMPORTED_MODULE_3__.responseDoneEventSchema.safeParse(parsed);\n            if (!response.success) {\n                _logger_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error('Error parsing response done event', response.error);\n                return;\n            }\n            const inputTokens = response.data.response.usage?.input_tokens ?? 0;\n            const outputTokens = response.data.response.usage?.output_tokens ?? 0;\n            const totalTokens = inputTokens + outputTokens;\n            const usage = new _openai_agents_core__WEBPACK_IMPORTED_MODULE_0__.Usage({\n                inputTokens,\n                inputTokensDetails: response.data.response.usage?.input_tokens_details ?? {},\n                outputTokens,\n                outputTokensDetails: response.data.response.usage?.output_tokens_details ?? {},\n                totalTokens,\n            });\n            this.emit('usage_update', usage);\n            this.emit('turn_done', {\n                type: 'response_done',\n                response: {\n                    id: response.data.response.id ?? '',\n                    output: response.data.response.output ?? [],\n                    usage: {\n                        inputTokens,\n                        inputTokensDetails: response.data.response.usage?.input_tokens_details ?? {},\n                        outputTokens,\n                        outputTokensDetails: response.data.response.usage?.output_tokens_details ?? {},\n                        totalTokens,\n                    },\n                },\n            });\n            return;\n        }\n        if (parsed.type === 'response.audio.done') {\n            this.emit('audio_done');\n            return;\n        }\n        if (parsed.type === 'conversation.item.deleted') {\n            this.emit('item_deleted', {\n                itemId: parsed.item_id,\n            });\n            return;\n        }\n        if (parsed.type === 'conversation.item.input_audio_transcription.completed' ||\n            parsed.type === 'conversation.item.truncated') {\n            // right now rather than keeping track of partials and rebuilding the item we\n            // will retrieve it instead which triggers the `conversation.item.retrieved` event below\n            this.sendEvent({\n                type: 'conversation.item.retrieve',\n                item_id: parsed.item_id,\n            });\n            return;\n        }\n        if (parsed.type === 'conversation.item.input_audio_transcription.delta' ||\n            parsed.type === 'response.text.delta' ||\n            parsed.type === 'response.audio_transcript.delta' ||\n            parsed.type === 'response.function_call_arguments.delta') {\n            if (parsed.type === 'response.audio_transcript.delta') {\n                this.emit('audio_transcript_delta', {\n                    type: 'transcript_delta',\n                    delta: parsed.delta,\n                    itemId: parsed.item_id,\n                });\n            }\n            // no support for partial transcripts yet.\n            return;\n        }\n        if (parsed.type === 'conversation.item.created' ||\n            parsed.type === 'conversation.item.retrieved') {\n            if (parsed.item.type === 'message') {\n                const previousItemId = parsed.type === 'conversation.item.created'\n                    ? parsed.previous_item_id\n                    : null;\n                const item = _items_mjs__WEBPACK_IMPORTED_MODULE_1__.realtimeMessageItemSchema.parse({\n                    itemId: parsed.item.id,\n                    previousItemId,\n                    type: parsed.item.type,\n                    role: parsed.item.role,\n                    content: parsed.item.content,\n                    status: parsed.item.status,\n                });\n                this.emit('item_update', item);\n                return;\n            }\n        }\n        if (parsed.type === 'response.output_item.done' ||\n            parsed.type === 'response.output_item.added') {\n            const item = parsed.item;\n            if (item.type === 'function_call' && item.status === 'completed') {\n                const toolCall = _items_mjs__WEBPACK_IMPORTED_MODULE_1__.realtimeToolCallItem.parse({\n                    itemId: item.id,\n                    type: item.type,\n                    status: 'in_progress', // we set it to in_progress for the UI as it will only be completed with the output\n                    arguments: item.arguments,\n                    name: item.name,\n                    output: null,\n                });\n                this.emit('item_update', toolCall);\n                this.emit('function_call', {\n                    id: item.id,\n                    type: 'function_call',\n                    callId: item.call_id ?? '',\n                    arguments: item.arguments ?? '',\n                    name: item.name ?? '',\n                });\n                return;\n            }\n            if (item.type === 'message') {\n                const realtimeItem = _items_mjs__WEBPACK_IMPORTED_MODULE_1__.realtimeMessageItemSchema.parse({\n                    itemId: parsed.item.id,\n                    type: parsed.item.type,\n                    role: parsed.item.role,\n                    content: parsed.item.content,\n                    status: 'in_progress',\n                });\n                this.emit('item_update', realtimeItem);\n                return;\n            }\n        }\n    }\n    _onError(error) {\n        this.emit('error', {\n            type: 'error',\n            error,\n        });\n    }\n    _onOpen() {\n        this.emit('connected');\n    }\n    _onClose() {\n        this.emit('disconnected');\n    }\n    /**\n     * Send a message to the Realtime API. This will create a new item in the conversation and\n     * trigger a response.\n     *\n     * @param message - The message to send.\n     * @param otherEventData - Additional event data to send.\n     */\n    sendMessage(message, otherEventData) {\n        this.sendEvent({\n            type: 'conversation.item.create',\n            item: typeof message === 'string'\n                ? {\n                    type: 'message',\n                    role: 'user',\n                    content: [\n                        {\n                            type: 'input_text',\n                            text: message,\n                        },\n                    ],\n                }\n                : message,\n            ...otherEventData,\n        });\n        this.sendEvent({\n            type: 'response.create',\n        });\n    }\n    _getMergedSessionConfig(config) {\n        const sessionData = {\n            instructions: config.instructions,\n            model: config.model ??\n                this.#model ??\n                DEFAULT_OPENAI_REALTIME_SESSION_CONFIG.model,\n            voice: config.voice ?? DEFAULT_OPENAI_REALTIME_SESSION_CONFIG.voice,\n            modalities: config.modalities ?? DEFAULT_OPENAI_REALTIME_SESSION_CONFIG.modalities,\n            input_audio_format: config.inputAudioFormat ??\n                DEFAULT_OPENAI_REALTIME_SESSION_CONFIG.inputAudioFormat,\n            output_audio_format: config.outputAudioFormat ??\n                DEFAULT_OPENAI_REALTIME_SESSION_CONFIG.outputAudioFormat,\n            input_audio_transcription: config.inputAudioTranscription ??\n                DEFAULT_OPENAI_REALTIME_SESSION_CONFIG.inputAudioTranscription,\n            turn_detection: config.turnDetection ??\n                DEFAULT_OPENAI_REALTIME_SESSION_CONFIG.turnDetection,\n            tool_choice: config.toolChoice ?? DEFAULT_OPENAI_REALTIME_SESSION_CONFIG.toolChoice,\n            tools: config.tools?.map((tool) => ({\n                ...tool,\n                strict: undefined,\n            })),\n            // We don't set tracing here to make sure that we don't try to override it on every\n            // session.update as it might lead to errors\n            ...(config.providerData ?? {}),\n        };\n        return sessionData;\n    }\n    /**\n     * Sets the internal tracing config. This is used to track the tracing config that has been set\n     * during the session.create event.\n     */\n    set _tracingConfig(tracingConfig) {\n        this.#tracingConfig = tracingConfig;\n    }\n    /**\n     * Sets the tracing config for the session. This will send the tracing config to the Realtime API.\n     *\n     * @param tracingConfig - The tracing config to set. We don't support 'auto' here as the SDK will always configure a Workflow Name unless it exists\n     */\n    _updateTracingConfig(tracingConfig) {\n        if (typeof this.#tracingConfig === 'undefined') {\n            // treating it as default value\n            this.#tracingConfig = null;\n        }\n        if (tracingConfig === 'auto') {\n            // turn on tracing in auto mode\n            this.sendEvent({\n                type: 'session.update',\n                session: {\n                    tracing: 'auto',\n                },\n            });\n            return;\n        }\n        if (typeof this.#tracingConfig !== 'string' &&\n            typeof tracingConfig !== 'string') {\n            // tracing is already set, we can't change it\n            _logger_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"].warn('Tracing config is already set, skipping setting it again. This likely happens when you already set a tracing config on session creation.');\n            return;\n        }\n        if (tracingConfig === null) {\n            _logger_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"].debug('Disabling tracing for this session. It cannot be turned on for this session from this point on.');\n            this.sendEvent({\n                type: 'session.update',\n                session: {\n                    tracing: null,\n                },\n            });\n            return;\n        }\n        if (this.#tracingConfig === null ||\n            typeof this.#tracingConfig === 'string') {\n            // tracing is currently not set so we can set it to the new value\n            this.sendEvent({\n                type: 'session.update',\n                session: {\n                    tracing: tracingConfig,\n                },\n            });\n            return;\n        }\n        if (tracingConfig?.group_id !== this.#tracingConfig?.group_id ||\n            tracingConfig?.metadata !== this.#tracingConfig?.metadata ||\n            tracingConfig?.workflow_name !== this.#tracingConfig?.workflow_name) {\n            _logger_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"].warn('Mismatch in tracing config. Ignoring the new tracing config. This likely happens when you already set a tracing config on session creation. Current tracing config: %s, new tracing config: %s', JSON.stringify(this.#tracingConfig), JSON.stringify(tracingConfig));\n            return;\n        }\n        this.sendEvent({\n            type: 'session.update',\n            session: {\n                tracing: tracingConfig,\n            },\n        });\n    }\n    /**\n     * Updates the session config. This will merge it with the current session config with the default\n     * values and send it to the Realtime API.\n     *\n     * @param config - The session config to update.\n     */\n    updateSessionConfig(config) {\n        const sessionData = this._getMergedSessionConfig(config);\n        this.sendEvent({\n            type: 'session.update',\n            session: sessionData,\n        });\n    }\n    /**\n     * Send the output of a function call to the Realtime API.\n     *\n     * @param toolCall - The tool call to send the output for.\n     * @param output - The output of the function call.\n     * @param startResponse - Whether to start a new response after sending the output.\n     */\n    sendFunctionCallOutput(toolCall, output, startResponse = true) {\n        this.sendEvent({\n            type: 'conversation.item.create',\n            item: {\n                type: 'function_call_output',\n                output,\n                call_id: toolCall.callId,\n            },\n        });\n        try {\n            const item = _items_mjs__WEBPACK_IMPORTED_MODULE_1__.realtimeToolCallItem.parse({\n                itemId: toolCall.id,\n                previousItemId: toolCall.previousItemId,\n                type: 'function_call',\n                status: 'completed',\n                arguments: toolCall.arguments,\n                name: toolCall.name,\n                output,\n            });\n            this.emit('item_update', item);\n        }\n        catch (error) {\n            _logger_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error('Error parsing tool call item', error, toolCall);\n        }\n        if (startResponse) {\n            this.sendEvent({\n                type: 'response.create',\n            });\n        }\n    }\n    /**\n     * Send an audio buffer to the Realtime API. If `{ commit: true }` is passed, the audio buffer\n     * will be committed and the model will start processing it. This is necessary if you have\n     * disabled turn detection / voice activity detection (VAD).\n     *\n     * @param audio - The audio buffer to send.\n     * @param options - The options for the audio buffer.\n     */\n    sendAudio(audio, { commit = false } = {}) {\n        this.sendEvent({\n            type: 'input_audio_buffer.append',\n            audio: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.arrayBufferToBase64)(audio),\n        });\n        if (commit) {\n            this.sendEvent({\n                type: 'input_audio_buffer.commit',\n            });\n        }\n    }\n    /**\n     * Reset the history of the conversation. This will create a diff between the old and new history\n     * and send the necessary events to the Realtime API to update the history.\n     *\n     * @param oldHistory - The old history of the conversation.\n     * @param newHistory - The new history of the conversation.\n     */\n    resetHistory(oldHistory, newHistory) {\n        const { removals, additions, updates } = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.diffRealtimeHistory)(oldHistory, newHistory);\n        const removalIds = new Set(removals.map((item) => item.itemId));\n        // we don't have an update event for items so we will remove and re-add what's there\n        for (const update of updates) {\n            removalIds.add(update.itemId);\n        }\n        if (removalIds.size > 0) {\n            for (const itemId of removalIds) {\n                this.sendEvent({\n                    type: 'conversation.item.delete',\n                    item_id: itemId,\n                });\n            }\n        }\n        const additionsAndUpdates = [...additions, ...updates];\n        for (const addition of additionsAndUpdates) {\n            if (addition.type === 'message') {\n                const itemEntry = {\n                    type: 'message',\n                    role: addition.role,\n                    content: addition.content,\n                    id: addition.itemId,\n                };\n                if (addition.role !== 'system' && addition.status) {\n                    itemEntry.status = addition.status;\n                }\n                this.sendEvent({\n                    type: 'conversation.item.create',\n                    item: itemEntry,\n                });\n            }\n            else if (addition.type === 'function_call') {\n                _logger_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"].warn('Function calls cannot be manually added or updated at the moment. Ignoring.');\n            }\n        }\n    }\n}\n//# sourceMappingURL=openaiRealtimeBase.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/openaiRealtimeBase.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/openaiRealtimeEvents.mjs":
/*!*****************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/openaiRealtimeEvents.mjs ***!
  \*****************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   conversationCreatedEventSchema: () => (/* binding */ conversationCreatedEventSchema),\n/* harmony export */   conversationItemContentSchema: () => (/* binding */ conversationItemContentSchema),\n/* harmony export */   conversationItemCreateEventSchema: () => (/* binding */ conversationItemCreateEventSchema),\n/* harmony export */   conversationItemCreatedEventSchema: () => (/* binding */ conversationItemCreatedEventSchema),\n/* harmony export */   conversationItemDeleteEventSchema: () => (/* binding */ conversationItemDeleteEventSchema),\n/* harmony export */   conversationItemDeletedEventSchema: () => (/* binding */ conversationItemDeletedEventSchema),\n/* harmony export */   conversationItemInputAudioTranscriptionCompletedEventSchema: () => (/* binding */ conversationItemInputAudioTranscriptionCompletedEventSchema),\n/* harmony export */   conversationItemInputAudioTranscriptionDeltaEventSchema: () => (/* binding */ conversationItemInputAudioTranscriptionDeltaEventSchema),\n/* harmony export */   conversationItemInputAudioTranscriptionFailedEventSchema: () => (/* binding */ conversationItemInputAudioTranscriptionFailedEventSchema),\n/* harmony export */   conversationItemRetrieveEventSchema: () => (/* binding */ conversationItemRetrieveEventSchema),\n/* harmony export */   conversationItemRetrievedEventSchema: () => (/* binding */ conversationItemRetrievedEventSchema),\n/* harmony export */   conversationItemSchema: () => (/* binding */ conversationItemSchema),\n/* harmony export */   conversationItemTruncateEventSchema: () => (/* binding */ conversationItemTruncateEventSchema),\n/* harmony export */   conversationItemTruncatedEventSchema: () => (/* binding */ conversationItemTruncatedEventSchema),\n/* harmony export */   errorEventSchema: () => (/* binding */ errorEventSchema),\n/* harmony export */   genericEventSchema: () => (/* binding */ genericEventSchema),\n/* harmony export */   inputAudioBufferAppendEventSchema: () => (/* binding */ inputAudioBufferAppendEventSchema),\n/* harmony export */   inputAudioBufferClearEventSchema: () => (/* binding */ inputAudioBufferClearEventSchema),\n/* harmony export */   inputAudioBufferClearedEventSchema: () => (/* binding */ inputAudioBufferClearedEventSchema),\n/* harmony export */   inputAudioBufferCommitEventSchema: () => (/* binding */ inputAudioBufferCommitEventSchema),\n/* harmony export */   inputAudioBufferCommittedEventSchema: () => (/* binding */ inputAudioBufferCommittedEventSchema),\n/* harmony export */   inputAudioBufferSpeechStartedEventSchema: () => (/* binding */ inputAudioBufferSpeechStartedEventSchema),\n/* harmony export */   inputAudioBufferSpeechStoppedEventSchema: () => (/* binding */ inputAudioBufferSpeechStoppedEventSchema),\n/* harmony export */   outputAudioBufferClearedEventSchema: () => (/* binding */ outputAudioBufferClearedEventSchema),\n/* harmony export */   outputAudioBufferStartedEventSchema: () => (/* binding */ outputAudioBufferStartedEventSchema),\n/* harmony export */   outputAudioBufferStoppedEventSchema: () => (/* binding */ outputAudioBufferStoppedEventSchema),\n/* harmony export */   parseRealtimeEvent: () => (/* binding */ parseRealtimeEvent),\n/* harmony export */   rateLimitsUpdatedEventSchema: () => (/* binding */ rateLimitsUpdatedEventSchema),\n/* harmony export */   realtimeClientEventSchema: () => (/* binding */ realtimeClientEventSchema),\n/* harmony export */   realtimeResponse: () => (/* binding */ realtimeResponse),\n/* harmony export */   realtimeServerEventSchema: () => (/* binding */ realtimeServerEventSchema),\n/* harmony export */   responseAudioDeltaEventSchema: () => (/* binding */ responseAudioDeltaEventSchema),\n/* harmony export */   responseAudioDoneEventSchema: () => (/* binding */ responseAudioDoneEventSchema),\n/* harmony export */   responseAudioTranscriptDeltaEventSchema: () => (/* binding */ responseAudioTranscriptDeltaEventSchema),\n/* harmony export */   responseAudioTranscriptDoneEventSchema: () => (/* binding */ responseAudioTranscriptDoneEventSchema),\n/* harmony export */   responseCancelEventSchema: () => (/* binding */ responseCancelEventSchema),\n/* harmony export */   responseContentPartAddedEventSchema: () => (/* binding */ responseContentPartAddedEventSchema),\n/* harmony export */   responseContentPartDoneEventSchema: () => (/* binding */ responseContentPartDoneEventSchema),\n/* harmony export */   responseCreateEventSchema: () => (/* binding */ responseCreateEventSchema),\n/* harmony export */   responseCreatedEventSchema: () => (/* binding */ responseCreatedEventSchema),\n/* harmony export */   responseDoneEventSchema: () => (/* binding */ responseDoneEventSchema),\n/* harmony export */   responseFunctionCallArgumentsDeltaEventSchema: () => (/* binding */ responseFunctionCallArgumentsDeltaEventSchema),\n/* harmony export */   responseFunctionCallArgumentsDoneEventSchema: () => (/* binding */ responseFunctionCallArgumentsDoneEventSchema),\n/* harmony export */   responseOutputItemAddedEventSchema: () => (/* binding */ responseOutputItemAddedEventSchema),\n/* harmony export */   responseOutputItemDoneEventSchema: () => (/* binding */ responseOutputItemDoneEventSchema),\n/* harmony export */   responseTextDeltaEventSchema: () => (/* binding */ responseTextDeltaEventSchema),\n/* harmony export */   responseTextDoneEventSchema: () => (/* binding */ responseTextDoneEventSchema),\n/* harmony export */   sessionCreatedEventSchema: () => (/* binding */ sessionCreatedEventSchema),\n/* harmony export */   sessionUpdateEventSchema: () => (/* binding */ sessionUpdateEventSchema),\n/* harmony export */   sessionUpdatedEventSchema: () => (/* binding */ sessionUpdatedEventSchema),\n/* harmony export */   transcriptionSessionUpdateEventSchema: () => (/* binding */ transcriptionSessionUpdateEventSchema),\n/* harmony export */   transcriptionSessionUpdatedEventSchema: () => (/* binding */ transcriptionSessionUpdatedEventSchema)\n/* harmony export */ });\n/* harmony import */ var _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @openai/zod/v3 */ \"(ssr)/./node_modules/.pnpm/zod@3.25.51/node_modules/zod/dist/esm/index.js\");\n\n// Event schemas mirroring the structures defined in the OpenAI SDK typings.\n// Most fields from the interfaces in `realtime.d.ts` are captured here to\n// provide better runtime validation when parsing events from the server.\nconst realtimeResponse = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    conversation_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    max_output_tokens: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number().or(_openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('inf')).optional(),\n    metadata: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.record(_openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(), _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.any()).optional().nullable(),\n    modalities: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.array(_openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string()).optional(),\n    object: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('realtime.response').optional(),\n    output: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.array(_openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.any()).optional(),\n    output_audio_format: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    status: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"](['completed', 'incomplete', 'failed', 'cancelled']).optional(),\n    status_details: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.record(_openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(), _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.any()).optional().nullable(),\n    usage: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        input_tokens: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n        input_tokens_details: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.record(_openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(), _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.any()).optional().nullable(),\n        output_tokens: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n        output_tokens_details: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.record(_openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(), _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.any())\n            .optional()\n            .nullable(),\n    })\n        .optional(),\n    voice: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n});\n// Basic content schema used by ConversationItem.\nconst conversationItemContentSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    audio: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().nullable().optional(),\n    text: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().nullable().optional(),\n    transcript: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().nullable().optional(),\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.union([\n        _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('input_text'),\n        _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('input_audio'),\n        _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('item_reference'),\n        _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('text'),\n        _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('audio'),\n    ]),\n});\nconst conversationItemSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    arguments: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    call_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    content: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.array(conversationItemContentSchema).optional(),\n    name: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    object: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('realtime.item').optional(),\n    output: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    role: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"](['user', 'assistant', 'system']).optional(),\n    status: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"](['completed', 'incomplete', 'in_progress']).optional(),\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"](['message', 'function_call', 'function_call_output']).optional(),\n});\nconst conversationCreatedEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('conversation.created'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    conversation: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n        object: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('realtime.conversation').optional(),\n    }),\n});\nconst conversationItemCreatedEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('conversation.item.created'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    item: conversationItemSchema,\n    previous_item_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().nullable().optional(),\n});\nconst conversationItemDeletedEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('conversation.item.deleted'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    item_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n});\nconst conversationItemInputAudioTranscriptionCompletedEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('conversation.item.input_audio_transcription.completed'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    item_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    content_index: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    transcript: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    logprobs: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.array(_openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.any()).nullable().optional(),\n});\nconst conversationItemInputAudioTranscriptionDeltaEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('conversation.item.input_audio_transcription.delta'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    item_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    content_index: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n    delta: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    logprobs: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.array(_openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.any()).nullable().optional(),\n});\nconst conversationItemInputAudioTranscriptionFailedEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('conversation.item.input_audio_transcription.failed'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    item_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    content_index: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    error: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        code: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n        message: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n        param: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n        type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    }),\n});\nconst conversationItemRetrievedEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('conversation.item.retrieved'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    item: conversationItemSchema,\n});\nconst conversationItemTruncatedEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('conversation.item.truncated'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    item_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    audio_end_ms: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    content_index: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n});\nconst conversationItemCreateEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('conversation.item.create'),\n    item: conversationItemSchema,\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    previous_item_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().nullable().optional(),\n});\nconst conversationItemDeleteEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('conversation.item.delete'),\n    item_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n});\nconst conversationItemRetrieveEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('conversation.item.retrieve'),\n    item_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n});\nconst conversationItemTruncateEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('conversation.item.truncate'),\n    item_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    audio_end_ms: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    content_index: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n});\nconst errorEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('error'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    error: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.any().optional(),\n});\nconst inputAudioBufferClearedEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('input_audio_buffer.cleared'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n});\nconst inputAudioBufferAppendEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('input_audio_buffer.append'),\n    audio: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n});\nconst inputAudioBufferClearEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('input_audio_buffer.clear'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n});\nconst inputAudioBufferCommitEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('input_audio_buffer.commit'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n});\nconst inputAudioBufferCommittedEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('input_audio_buffer.committed'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    item_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    previous_item_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().nullable().optional(),\n});\nconst inputAudioBufferSpeechStartedEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('input_audio_buffer.speech_started'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    item_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    audio_start_ms: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n});\nconst inputAudioBufferSpeechStoppedEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('input_audio_buffer.speech_stopped'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    item_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    audio_end_ms: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n});\nconst outputAudioBufferStartedEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('output_audio_buffer.started'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n})\n    .passthrough();\nconst outputAudioBufferStoppedEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('output_audio_buffer.stopped'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n})\n    .passthrough();\nconst outputAudioBufferClearedEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('output_audio_buffer.cleared'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n});\nconst rateLimitsUpdatedEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('rate_limits.updated'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    rate_limits: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.array(_openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        limit: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n        name: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"](['requests', 'tokens']).optional(),\n        remaining: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n        reset_seconds: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n    })),\n});\nconst responseAudioDeltaEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('response.audio.delta'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    item_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    content_index: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    delta: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    output_index: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    response_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n});\nconst responseAudioDoneEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('response.audio.done'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    item_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    content_index: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    output_index: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    response_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n});\nconst responseAudioTranscriptDeltaEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('response.audio_transcript.delta'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    item_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    content_index: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    delta: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    output_index: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    response_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n});\nconst responseAudioTranscriptDoneEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('response.audio_transcript.done'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    item_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    content_index: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    transcript: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    output_index: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    response_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n});\nconst responseContentPartAddedEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('response.content_part.added'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    item_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    content_index: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    output_index: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    response_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    part: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        audio: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n        text: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n        transcript: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n        type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"](['text', 'audio']).optional(),\n    }),\n});\nconst responseContentPartDoneEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('response.content_part.done'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    item_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    content_index: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    output_index: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    response_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    part: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        audio: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n        text: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n        transcript: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n        type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"](['text', 'audio']).optional(),\n    }),\n});\nconst responseCreatedEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('response.created'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    response: realtimeResponse,\n});\nconst responseDoneEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('response.done'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    response: realtimeResponse,\n    test: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.boolean(),\n});\nconst responseFunctionCallArgumentsDeltaEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('response.function_call_arguments.delta'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    item_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    call_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    delta: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    output_index: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    response_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n});\nconst responseFunctionCallArgumentsDoneEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('response.function_call_arguments.done'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    item_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    call_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    arguments: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    output_index: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    response_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n});\nconst responseOutputItemAddedEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('response.output_item.added'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    item: conversationItemSchema,\n    output_index: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    response_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n});\nconst responseOutputItemDoneEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('response.output_item.done'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    item: conversationItemSchema,\n    output_index: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    response_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n});\nconst responseTextDeltaEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('response.text.delta'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    item_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    content_index: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    delta: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    output_index: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    response_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n});\nconst responseTextDoneEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('response.text.done'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    item_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    content_index: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    text: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    output_index: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    response_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n});\nconst sessionCreatedEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('session.created'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    session: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.any(),\n});\nconst sessionUpdatedEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('session.updated'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    session: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.any(),\n});\nconst responseCancelEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('response.cancel'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    response_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n});\nconst responseCreateEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('response.create'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    response: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.any().optional(),\n});\nconst sessionUpdateEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('session.update'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    session: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.any(),\n});\nconst transcriptionSessionUpdateEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('transcription_session.update'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    session: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.any(),\n});\nconst transcriptionSessionUpdatedEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal('transcription_session.updated'),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    session: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.any(),\n});\n/**\n * This schema is used if an event is unknown to the client. The Realtime API might introduce\n * new events at some point and we should handle them gracefully by treating them as generic events\n * only requiring a type and an optional event_id.\n */\nconst genericEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    event_id: _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional().nullable(),\n})\n    .passthrough();\nconst realtimeServerEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.discriminatedUnion('type', [\n    conversationCreatedEventSchema,\n    conversationItemCreatedEventSchema,\n    conversationItemDeletedEventSchema,\n    conversationItemInputAudioTranscriptionCompletedEventSchema,\n    conversationItemInputAudioTranscriptionDeltaEventSchema,\n    conversationItemInputAudioTranscriptionFailedEventSchema,\n    conversationItemRetrievedEventSchema,\n    conversationItemTruncatedEventSchema,\n    errorEventSchema,\n    inputAudioBufferClearedEventSchema,\n    inputAudioBufferCommittedEventSchema,\n    inputAudioBufferSpeechStartedEventSchema,\n    inputAudioBufferSpeechStoppedEventSchema,\n    outputAudioBufferStartedEventSchema,\n    outputAudioBufferStoppedEventSchema,\n    outputAudioBufferClearedEventSchema,\n    rateLimitsUpdatedEventSchema,\n    responseAudioDeltaEventSchema,\n    responseAudioDoneEventSchema,\n    responseAudioTranscriptDeltaEventSchema,\n    responseAudioTranscriptDoneEventSchema,\n    responseContentPartAddedEventSchema,\n    responseContentPartDoneEventSchema,\n    responseCreatedEventSchema,\n    responseDoneEventSchema,\n    responseFunctionCallArgumentsDeltaEventSchema,\n    responseFunctionCallArgumentsDoneEventSchema,\n    responseOutputItemAddedEventSchema,\n    responseOutputItemDoneEventSchema,\n    responseTextDeltaEventSchema,\n    responseTextDoneEventSchema,\n    sessionCreatedEventSchema,\n    sessionUpdatedEventSchema,\n    transcriptionSessionUpdatedEventSchema,\n]);\nconst realtimeClientEventSchema = _openai_zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.discriminatedUnion('type', [\n    conversationItemCreateEventSchema,\n    conversationItemDeleteEventSchema,\n    conversationItemRetrieveEventSchema,\n    conversationItemTruncateEventSchema,\n    inputAudioBufferAppendEventSchema,\n    inputAudioBufferClearEventSchema,\n    inputAudioBufferCommitEventSchema,\n    responseCancelEventSchema,\n    responseCreateEventSchema,\n    sessionUpdateEventSchema,\n    transcriptionSessionUpdateEventSchema,\n]);\n/**\n * Parses a realtime event from the server. If the event is unknown to the client, it will be treated as a generic event.\n * @param event - The event to parse.\n * @returns The parsed event or null if the event is unknown to the client.\n */\nfunction parseRealtimeEvent(event) {\n    const raw = JSON.parse(event.data.toString());\n    const parsed = realtimeServerEventSchema.safeParse(raw);\n    if (!parsed.success) {\n        const genericParsed = genericEventSchema.safeParse(raw);\n        if (genericParsed.success) {\n            return { data: genericParsed.data, isGeneric: true };\n        }\n        return { data: null, isGeneric: true };\n    }\n    return { data: parsed.data, isGeneric: false };\n}\n//# sourceMappingURL=openaiRealtimeEvents.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/openaiRealtimeEvents.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/openaiRealtimeWebRtc.mjs":
/*!*****************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/openaiRealtimeWebRtc.mjs ***!
  \*****************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OpenAIRealtimeWebRTC: () => (/* binding */ OpenAIRealtimeWebRTC)\n/* harmony export */ });\n/* harmony import */ var _openai_agents_core_shims__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @openai/agents-core/_shims */ \"(ssr)/./node_modules/.pnpm/@openai+agents-core@0.0.2_ws@8.18.2_zod@3.25.51/node_modules/@openai/agents-core/dist/shims/shims-node.mjs\");\n/* harmony import */ var _openai_agents_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @openai/agents-core */ \"(ssr)/./node_modules/.pnpm/@openai+agents-core@0.0.2_ws@8.18.2_zod@3.25.51/node_modules/@openai/agents-core/dist/index.mjs\");\n/* harmony import */ var _logger_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./logger.mjs */ \"(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/logger.mjs\");\n/* harmony import */ var _openaiRealtimeBase_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./openaiRealtimeBase.mjs */ \"(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/openaiRealtimeBase.mjs\");\n/* harmony import */ var _openaiRealtimeEvents_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./openaiRealtimeEvents.mjs */ \"(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/openaiRealtimeEvents.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/utils.mjs\");\n/// <reference lib=\"dom\" />\n\n\n\n\n\n\n/**\n * Transport layer that's handling the connection between the client and OpenAI's Realtime API\n * via WebRTC. While this transport layer is designed to be used within a RealtimeSession, it can\n * also be used standalone if you want to have a direct connection to the Realtime API.\n *\n * Unless you specify a `mediaStream` or `audioElement` option, the transport layer will\n * automatically configure the microphone and audio output to be used by the session.\n */\nclass OpenAIRealtimeWebRTC extends _openaiRealtimeBase_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIRealtimeBase {\n    options;\n    #url;\n    #state = {\n        status: 'disconnected',\n        peerConnection: undefined,\n        dataChannel: undefined,\n    };\n    #useInsecureApiKey;\n    #ongoingResponse = false;\n    #muted = false;\n    constructor(options = {}) {\n        if (typeof RTCPeerConnection === 'undefined') {\n            throw new Error('WebRTC is not supported in this environment');\n        }\n        super(options);\n        this.options = options;\n        this.#url = options.baseUrl ?? `https://api.openai.com/v1/realtime`;\n        this.#useInsecureApiKey = options.useInsecureApiKey ?? false;\n    }\n    /**\n     * The current status of the WebRTC connection.\n     */\n    get status() {\n        return this.#state.status;\n    }\n    /**\n     * The current connection state of the WebRTC connection including the peer connection and data\n     * channel.\n     */\n    get connectionState() {\n        return this.#state;\n    }\n    /**\n     * Whether the session is muted.\n     */\n    get muted() {\n        return this.#muted;\n    }\n    /**\n     * Connect to the Realtime API. This will establish the connection to the OpenAI Realtime API\n     * via WebRTC.\n     *\n     * If you are using a browser, the transport layer will also automatically configure the\n     * microphone and audio output to be used by the session.\n     *\n     * @param options - The options for the connection.\n     */\n    async connect(options) {\n        if (this.#state.status === 'connected') {\n            return;\n        }\n        if (this.#state.status === 'connecting') {\n            _logger_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"].warn('Realtime connection already in progress. Please await original promise');\n        }\n        const model = options.model ?? this.currentModel;\n        this.currentModel = model;\n        const baseUrl = options.url ?? this.#url;\n        const apiKey = await this._getApiKey(options);\n        const isClientKey = typeof apiKey === 'string' && apiKey.startsWith('ek_');\n        if ((0,_openai_agents_core_shims__WEBPACK_IMPORTED_MODULE_0__.isBrowserEnvironment)() && !this.#useInsecureApiKey && !isClientKey) {\n            throw new _openai_agents_core__WEBPACK_IMPORTED_MODULE_1__.UserError('Using the WebRTC connection in a browser environment requires an insecure API key. Please use a WebSocket connection instead or set the useInsecureApiKey option to true.');\n        }\n        // eslint-disable-next-line no-async-promise-executor\n        return new Promise(async (resolve, reject) => {\n            try {\n                const userSessionConfig = {\n                    ...(options.initialSessionConfig || {}),\n                    model: this.currentModel,\n                };\n                const connectionUrl = new URL(baseUrl);\n                const peerConnection = new RTCPeerConnection();\n                const dataChannel = peerConnection.createDataChannel('oai-events');\n                this.#state = {\n                    status: 'connecting',\n                    peerConnection,\n                    dataChannel,\n                };\n                this.emit('connection_change', this.#state.status);\n                dataChannel.addEventListener('open', () => {\n                    this.#state = {\n                        status: 'connected',\n                        peerConnection,\n                        dataChannel,\n                    };\n                    // Sending the session config again here once the channel is connected to ensure\n                    // that the session config is sent to the server before the first response is received\n                    // Setting it on connection should work but the config is not being validated on the\n                    // server. This triggers a validation error if the config is not valid.\n                    this.updateSessionConfig(userSessionConfig);\n                    this.emit('connection_change', this.#state.status);\n                    this._onOpen();\n                    resolve();\n                });\n                dataChannel.addEventListener('error', (event) => {\n                    this.close();\n                    this._onError(event);\n                    reject(event);\n                });\n                dataChannel.addEventListener('message', (event) => {\n                    this._onMessage(event);\n                    const { data: parsed, isGeneric } = (0,_openaiRealtimeEvents_mjs__WEBPACK_IMPORTED_MODULE_4__.parseRealtimeEvent)(event);\n                    if (!parsed || isGeneric) {\n                        return;\n                    }\n                    if (parsed.type === 'response.created') {\n                        this.#ongoingResponse = true;\n                    }\n                    else if (parsed.type === 'response.done') {\n                        this.#ongoingResponse = false;\n                    }\n                    if (parsed.type === 'session.created') {\n                        this._tracingConfig = parsed.session.tracing;\n                        // Trying to turn on tracing after the session is created\n                        this._updateTracingConfig(userSessionConfig.tracing ?? 'auto');\n                    }\n                });\n                // set up audio playback\n                const audioElement = this.options.audioElement ?? document.createElement('audio');\n                audioElement.autoplay = true;\n                peerConnection.ontrack = (event) => {\n                    audioElement.srcObject = event.streams[0];\n                };\n                // get microphone stream\n                const stream = this.options.mediaStream ??\n                    (await navigator.mediaDevices.getUserMedia({\n                        audio: true,\n                    }));\n                peerConnection.addTrack(stream.getAudioTracks()[0]);\n                const offer = await peerConnection.createOffer();\n                await peerConnection.setLocalDescription(offer);\n                if (!offer.sdp) {\n                    throw new Error('Failed to create offer');\n                }\n                const sessionConfig = {\n                    ...this._getMergedSessionConfig(userSessionConfig),\n                    model: this.currentModel,\n                };\n                const data = new FormData();\n                data.append('sdp', offer.sdp);\n                data.append('session', JSON.stringify(sessionConfig));\n                const sdpResponse = await fetch(connectionUrl, {\n                    method: 'POST',\n                    body: data,\n                    headers: {\n                        Authorization: `Bearer ${apiKey}`,\n                        'X-OpenAI-Agents-SDK': _utils_mjs__WEBPACK_IMPORTED_MODULE_5__.HEADERS['X-OpenAI-Agents-SDK'],\n                    },\n                });\n                const answer = {\n                    type: 'answer',\n                    sdp: await sdpResponse.text(),\n                };\n                await peerConnection.setRemoteDescription(answer);\n            }\n            catch (error) {\n                this.close();\n                this._onError(error);\n                reject(error);\n            }\n        });\n    }\n    /**\n     * Send an event to the Realtime API. This will stringify the event and send it directly to the\n     * API. This can be used if you want to take control over the connection and send events manually.\n     *\n     * @param event - The event to send.\n     */\n    sendEvent(event) {\n        if (!this.#state.dataChannel ||\n            this.#state.dataChannel.readyState !== 'open') {\n            throw new Error('WebRTC data channel is not connected. Make sure you call `connect()` before sending events.');\n        }\n        this.#state.dataChannel.send(JSON.stringify(event));\n    }\n    /**\n     * Mute or unmute the session.\n     * @param muted - Whether to mute the session.\n     */\n    mute(muted) {\n        this.#muted = muted;\n        if (this.#state.peerConnection) {\n            const peerConnection = this.#state.peerConnection;\n            peerConnection.getSenders().forEach((sender) => {\n                if (sender.track) {\n                    sender.track.enabled = !muted;\n                }\n            });\n        }\n    }\n    /**\n     * Close the connection to the Realtime API and disconnects the underlying WebRTC connection.\n     */\n    close() {\n        if (this.#state.dataChannel) {\n            this.#state.dataChannel.close();\n        }\n        if (this.#state.peerConnection) {\n            const peerConnection = this.#state.peerConnection;\n            peerConnection.getSenders().forEach((sender) => {\n                sender.track?.stop();\n            });\n            peerConnection.close();\n        }\n        if (this.#state.status !== 'disconnected') {\n            this.#state = {\n                status: 'disconnected',\n                peerConnection: undefined,\n                dataChannel: undefined,\n            };\n            this.emit('connection_change', this.#state.status);\n            this._onClose();\n        }\n    }\n    /**\n     * Interrupt the current response if one is ongoing and clear the audio buffer so that the agent\n     * stops talking.\n     */\n    interrupt() {\n        if (this.#ongoingResponse) {\n            this.sendEvent({\n                type: 'response.cancel',\n            });\n        }\n        this.sendEvent({\n            type: 'output_audio_buffer.clear',\n        });\n    }\n}\n//# sourceMappingURL=openaiRealtimeWebRtc.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/openaiRealtimeWebRtc.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/openaiRealtimeWebsocket.mjs":
/*!********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/openaiRealtimeWebsocket.mjs ***!
  \********************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OpenAIRealtimeWebSocket: () => (/* binding */ OpenAIRealtimeWebSocket)\n/* harmony export */ });\n/* harmony import */ var _openai_agents_realtime_shims__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @openai/agents-realtime/_shims */ \"(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/shims/shims-node.mjs\");\n/* harmony import */ var _openaiRealtimeBase_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./openaiRealtimeBase.mjs */ \"(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/openaiRealtimeBase.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/utils.mjs\");\n/* harmony import */ var _openai_agents_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @openai/agents-core */ \"(ssr)/./node_modules/.pnpm/@openai+agents-core@0.0.2_ws@8.18.2_zod@3.25.51/node_modules/@openai/agents-core/dist/index.mjs\");\n/* harmony import */ var _openaiRealtimeEvents_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./openaiRealtimeEvents.mjs */ \"(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/openaiRealtimeEvents.mjs\");\n\n\n\n\n\n/**\n * Transport layer that's handling the connection between the client and OpenAI's Realtime API\n * via WebSockets. While this transport layer is designed to be used within a RealtimeSession, it\n * can also be used standalone if you want to have a direct connection to the Realtime API.\n */\nclass OpenAIRealtimeWebSocket extends _openaiRealtimeBase_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIRealtimeBase {\n    #apiKey;\n    #url;\n    #state = {\n        status: 'disconnected',\n        websocket: undefined,\n    };\n    #useInsecureApiKey;\n    #currentItemId;\n    #currentAudioContentIndex;\n    /**\n     * Timestamp maintained by the transport layer to aid with the calculation of the elapsed time\n     * since the response started to compute the right interruption time.\n     *\n     * Mostly internal but might be used by extended transport layers for their interruption\n     * calculation.\n     */\n    _firstAudioTimestamp;\n    _audioLengthMs = 0;\n    #ongoingResponse = false;\n    constructor(options = {}) {\n        super(options);\n        this.#url = `wss://api.openai.com/v1/realtime?model=${this.currentModel}`;\n        this.#useInsecureApiKey = options.useInsecureApiKey ?? false;\n    }\n    /**\n     * The current status of the WebSocket connection.\n     */\n    get status() {\n        return this.#state.status;\n    }\n    /**\n     * The current connection state of the WebSocket connection.\n     */\n    get connectionState() {\n        return this.#state;\n    }\n    /**\n     * Always returns `null` as the WebSocket transport layer does not handle muting. Instead,\n     * this should be handled by the client by not triggering the `sendAudio` method.\n     */\n    get muted() {\n        return null;\n    }\n    /**\n     * The current item ID of the ongoing response.\n     */\n    get currentItemId() {\n        return this.#currentItemId;\n    }\n    /**\n     * Triggers the `audio` event that a client might listen to to receive the audio buffer.\n     * Protected for you to be able to override and disable emitting this event in case your extended\n     * transport layer handles audio internally.\n     *\n     * @param audioEvent - The audio event to emit.\n     */\n    _onAudio(audioEvent) {\n        this.emit('audio', audioEvent);\n    }\n    #setupWebSocket(resolve, reject, sessionConfig) {\n        if (this.#state.websocket) {\n            resolve();\n            return;\n        }\n        if (!this.#apiKey) {\n            throw new _openai_agents_core__WEBPACK_IMPORTED_MODULE_3__.UserError('API key is not set. Please call `connect()` with an API key first.');\n        }\n        if ((0,_openai_agents_realtime_shims__WEBPACK_IMPORTED_MODULE_0__.isBrowserEnvironment)() &&\n            !this.#apiKey.startsWith('ek_') &&\n            !this.#useInsecureApiKey) {\n            throw new _openai_agents_core__WEBPACK_IMPORTED_MODULE_3__.UserError('Using the WebSocket connection in a browser environment requires an ephemeral client key. If you have to use a regular API key, set the `useInsecureApiKey` option to true.');\n        }\n        const websocketArguments = (0,_openai_agents_realtime_shims__WEBPACK_IMPORTED_MODULE_0__.isBrowserEnvironment)()\n            ? [\n                'realtime',\n                // Auth\n                'openai-insecure-api-key.' + this.#apiKey,\n                // Beta protocol, required\n                'openai-beta.realtime-v1',\n                // Version header\n                _utils_mjs__WEBPACK_IMPORTED_MODULE_2__.WEBSOCKET_META,\n            ]\n            : {\n                headers: {\n                    Authorization: `Bearer ${this.#apiKey}`,\n                    'OpenAI-Beta': 'realtime=v1',\n                    ..._utils_mjs__WEBPACK_IMPORTED_MODULE_2__.HEADERS,\n                },\n            };\n        const ws = new _openai_agents_realtime_shims__WEBPACK_IMPORTED_MODULE_0__.WebSocket(this.#url, websocketArguments);\n        this.#state = {\n            status: 'connecting',\n            websocket: ws,\n        };\n        this.emit('connection_change', this.#state.status);\n        ws.addEventListener('open', () => {\n            this.#state = {\n                status: 'connected',\n                websocket: ws,\n            };\n            this.emit('connection_change', this.#state.status);\n            this._onOpen();\n            resolve();\n        });\n        ws.addEventListener('error', (error) => {\n            this._onError(error);\n            this.#state = {\n                status: 'disconnected',\n                websocket: undefined,\n            };\n            this.emit('connection_change', this.#state.status);\n            reject(error);\n        });\n        ws.addEventListener('message', (message) => {\n            this._onMessage(message);\n            const { data: parsed, isGeneric } = (0,_openaiRealtimeEvents_mjs__WEBPACK_IMPORTED_MODULE_4__.parseRealtimeEvent)(message);\n            if (!parsed || isGeneric) {\n                return;\n            }\n            if (parsed.type === 'response.audio.delta') {\n                this.#currentAudioContentIndex = parsed.content_index;\n                this.#currentItemId = parsed.item_id;\n                if (this._firstAudioTimestamp === undefined) {\n                    // If the response start timestamp is not set, we set it to the current time.\n                    // This is used to calculate the elapsed time for interruption.\n                    this._firstAudioTimestamp = Date.now();\n                    this._audioLengthMs = 0;\n                }\n                const buff = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.base64ToArrayBuffer)(parsed.delta);\n                // calculate the audio length in milliseconds assuming 24kHz pcm16le\n                this._audioLengthMs += buff.byteLength / 24 / 2; // 24kHz * 2 bytes per sample\n                const audioEvent = {\n                    type: 'audio',\n                    data: buff,\n                    responseId: parsed.response_id,\n                };\n                this._onAudio(audioEvent);\n            }\n            else if (parsed.type === 'input_audio_buffer.speech_started') {\n                this.interrupt();\n            }\n            else if (parsed.type === 'response.created') {\n                this.#ongoingResponse = true;\n            }\n            else if (parsed.type === 'response.done') {\n                this.#ongoingResponse = false;\n            }\n            else if (parsed.type === 'session.created') {\n                this._tracingConfig = parsed.session.tracing;\n                // Trying to turn on tracing after the session is created\n                this._updateTracingConfig(sessionConfig.tracing ?? 'auto');\n            }\n        });\n        ws.addEventListener('close', () => {\n            this.#state = {\n                status: 'disconnected',\n                websocket: undefined,\n            };\n            this.emit('connection_change', this.#state.status);\n            this._onClose();\n        });\n    }\n    async connect(options) {\n        const model = options.model ?? this.currentModel;\n        this.currentModel = model;\n        this.#apiKey = await this._getApiKey(options);\n        this.#url =\n            options.url ??\n                `wss://api.openai.com/v1/realtime?model=${this.currentModel}`;\n        const sessionConfig = {\n            ...(options.initialSessionConfig || {}),\n            model: this.currentModel,\n        };\n        await new Promise((resolve, reject) => {\n            try {\n                this.#setupWebSocket(resolve, reject, sessionConfig);\n            }\n            catch (error) {\n                reject(error);\n            }\n        });\n        await this.updateSessionConfig(sessionConfig);\n    }\n    /**\n     * Send an event to the Realtime API. This will stringify the event and send it directly to the\n     * API. This can be used if you want to take control over the connection and send events manually.\n     *\n     * @param event - The event to send.\n     */\n    sendEvent(event) {\n        if (!this.#state.websocket) {\n            throw new Error('WebSocket is not connected. Make sure you call `connect()` before sending events.');\n        }\n        this.#state.websocket.send(JSON.stringify(event));\n    }\n    /**\n     * Close the WebSocket connection.\n     *\n     * This will also reset any internal connection tracking used for interruption handling.\n     */\n    close() {\n        this.#state.websocket?.close();\n        this.#currentItemId = undefined;\n        this._firstAudioTimestamp = undefined;\n        this._audioLengthMs = 0;\n        this.#currentAudioContentIndex = undefined;\n    }\n    /**\n     * Will throw an error as the WebSocket transport layer does not support muting.\n     */\n    mute(_muted) {\n        throw new Error('Mute is not supported for the WebSocket transport. You have to mute the audio input yourself.');\n    }\n    /**\n     * Send an audio buffer to the Realtime API. This is used for your client to send audio to the\n     * model to respond.\n     *\n     * @param audio - The audio buffer to send.\n     * @param options - The options for the audio buffer.\n     */\n    sendAudio(audio, options = {}) {\n        if (this.#state.status === 'connected') {\n            super.sendAudio(audio, options);\n        }\n    }\n    /**\n     * Send a cancel response event to the Realtime API. This is used to cancel an ongoing\n     *  response that the model is currently generating.\n     */\n    _cancelResponse() {\n        // cancel the ongoing response\n        if (this.#ongoingResponse) {\n            this.sendEvent({\n                type: 'response.cancel',\n            });\n        }\n    }\n    /**\n     * Do NOT call this method directly. Call `interrupt()` instead for proper interruption handling.\n     *\n     * This method is used to send the right events to the API to inform the model that the user has\n     * interrupted the response. It might be overridden/extended by an extended transport layer. See\n     * the `TwilioRealtimeTransportLayer` for an example.\n     *\n     * @param elapsedTime - The elapsed time since the response started.\n     */\n    _interrupt(elapsedTime) {\n        // immediately emit this event so the client can stop playing audio\n        this.emit('audio_interrupted');\n        this.sendEvent({\n            type: 'conversation.item.truncate',\n            item_id: this.#currentItemId,\n            content_index: this.#currentAudioContentIndex,\n            audio_end_ms: elapsedTime,\n        });\n    }\n    /**\n     * Interrupt the ongoing response. This method is triggered automatically by the client when\n     * voice activity detection (VAD) is enabled (default) as well as when an output guardrail got\n     * triggered.\n     *\n     * You can also call this method directly if you want to interrupt the conversation for example\n     * based on an event in the client.\n     */\n    interrupt() {\n        if (!this.#currentItemId || typeof this._firstAudioTimestamp !== 'number') {\n            return;\n        }\n        this._cancelResponse();\n        const elapsedTime = Date.now() - this._firstAudioTimestamp;\n        console.log(`Interrupting response after ${elapsedTime}ms`);\n        console.log(`Audio length: ${this._audioLengthMs}ms`);\n        if (elapsedTime >= 0 && elapsedTime < this._audioLengthMs) {\n            this._interrupt(elapsedTime);\n        }\n        this.#currentItemId = undefined;\n        this._firstAudioTimestamp = undefined;\n        this._audioLengthMs = 0;\n        this.#currentAudioContentIndex = undefined;\n    }\n}\n//# sourceMappingURL=openaiRealtimeWebsocket.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/openaiRealtimeWebsocket.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/realtimeAgent.mjs":
/*!**********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/realtimeAgent.mjs ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RealtimeAgent: () => (/* binding */ RealtimeAgent)\n/* harmony export */ });\n/* harmony import */ var _openai_agents_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @openai/agents-core */ \"(ssr)/./node_modules/.pnpm/@openai+agents-core@0.0.2_ws@8.18.2_zod@3.25.51/node_modules/@openai/agents-core/dist/index.mjs\");\n\n/**\n * A specialized agent instance that is meant to be used within a `RealtimeSession` to build\n * voice agents. Due to the nature of this agent, some configuration options are not supported\n * that are supported by regular `Agent` instances. For example:\n * - `model` choice is not supported as all RealtimeAgents will be handled by the same model within\n *   a `RealtimeSession`\n * - `modelSettings` is not supported as all RealtimeAgents will be handled by the same model within\n *   a `RealtimeSession`\n * - `outputType` is not supported as RealtimeAgents do not support structured outputs\n * - `toolUseBehavior` is not supported as all RealtimeAgents will be handled by the same model within\n *   a `RealtimeSession`\n * - `voice` can be configured on an `Agent` level however it cannot be changed after the first\n *    agent within a `RealtimeSession` spoke\n *\n * @example\n * ```ts\n * const agent = new RealtimeAgent({\n *   name: 'my-agent',\n *   instructions: 'You are a helpful assistant that can answer questions and help with tasks.',\n * })\n *\n * const session = new RealtimeSession(agent);\n * ```\n */\nclass RealtimeAgent extends _openai_agents_core__WEBPACK_IMPORTED_MODULE_0__.Agent {\n    /**\n     * The voice intended to be used by the agent. If another agent already spoke during the\n     * RealtimeSession, changing the voice during a handoff will fail.\n     */\n    voice;\n    constructor(config) {\n        super(config);\n        this.voice = config.voice ?? 'ash';\n    }\n}\n//# sourceMappingURL=realtimeAgent.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW5haSthZ2VudHMtcmVhbHRpbWVAMC4wLjJfem9kQDMuMjUuNTEvbm9kZV9tb2R1bGVzL0BvcGVuYWkvYWdlbnRzLXJlYWx0aW1lL2Rpc3QvcmVhbHRpbWVBZ2VudC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNkM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDTyw0QkFBNEIsc0RBQUs7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5haW55dHcvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW5haSthZ2VudHMtcmVhbHRpbWVAMC4wLjJfem9kQDMuMjUuNTEvbm9kZV9tb2R1bGVzL0BvcGVuYWkvYWdlbnRzLXJlYWx0aW1lL2Rpc3QvcmVhbHRpbWVBZ2VudC5tanM/OGYxZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZ2VudCwgfSBmcm9tICdAb3BlbmFpL2FnZW50cy1jb3JlJztcbi8qKlxuICogQSBzcGVjaWFsaXplZCBhZ2VudCBpbnN0YW5jZSB0aGF0IGlzIG1lYW50IHRvIGJlIHVzZWQgd2l0aGluIGEgYFJlYWx0aW1lU2Vzc2lvbmAgdG8gYnVpbGRcbiAqIHZvaWNlIGFnZW50cy4gRHVlIHRvIHRoZSBuYXR1cmUgb2YgdGhpcyBhZ2VudCwgc29tZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgYXJlIG5vdCBzdXBwb3J0ZWRcbiAqIHRoYXQgYXJlIHN1cHBvcnRlZCBieSByZWd1bGFyIGBBZ2VudGAgaW5zdGFuY2VzLiBGb3IgZXhhbXBsZTpcbiAqIC0gYG1vZGVsYCBjaG9pY2UgaXMgbm90IHN1cHBvcnRlZCBhcyBhbGwgUmVhbHRpbWVBZ2VudHMgd2lsbCBiZSBoYW5kbGVkIGJ5IHRoZSBzYW1lIG1vZGVsIHdpdGhpblxuICogICBhIGBSZWFsdGltZVNlc3Npb25gXG4gKiAtIGBtb2RlbFNldHRpbmdzYCBpcyBub3Qgc3VwcG9ydGVkIGFzIGFsbCBSZWFsdGltZUFnZW50cyB3aWxsIGJlIGhhbmRsZWQgYnkgdGhlIHNhbWUgbW9kZWwgd2l0aGluXG4gKiAgIGEgYFJlYWx0aW1lU2Vzc2lvbmBcbiAqIC0gYG91dHB1dFR5cGVgIGlzIG5vdCBzdXBwb3J0ZWQgYXMgUmVhbHRpbWVBZ2VudHMgZG8gbm90IHN1cHBvcnQgc3RydWN0dXJlZCBvdXRwdXRzXG4gKiAtIGB0b29sVXNlQmVoYXZpb3JgIGlzIG5vdCBzdXBwb3J0ZWQgYXMgYWxsIFJlYWx0aW1lQWdlbnRzIHdpbGwgYmUgaGFuZGxlZCBieSB0aGUgc2FtZSBtb2RlbCB3aXRoaW5cbiAqICAgYSBgUmVhbHRpbWVTZXNzaW9uYFxuICogLSBgdm9pY2VgIGNhbiBiZSBjb25maWd1cmVkIG9uIGFuIGBBZ2VudGAgbGV2ZWwgaG93ZXZlciBpdCBjYW5ub3QgYmUgY2hhbmdlZCBhZnRlciB0aGUgZmlyc3RcbiAqICAgIGFnZW50IHdpdGhpbiBhIGBSZWFsdGltZVNlc3Npb25gIHNwb2tlXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBjb25zdCBhZ2VudCA9IG5ldyBSZWFsdGltZUFnZW50KHtcbiAqICAgbmFtZTogJ215LWFnZW50JyxcbiAqICAgaW5zdHJ1Y3Rpb25zOiAnWW91IGFyZSBhIGhlbHBmdWwgYXNzaXN0YW50IHRoYXQgY2FuIGFuc3dlciBxdWVzdGlvbnMgYW5kIGhlbHAgd2l0aCB0YXNrcy4nLFxuICogfSlcbiAqXG4gKiBjb25zdCBzZXNzaW9uID0gbmV3IFJlYWx0aW1lU2Vzc2lvbihhZ2VudCk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIFJlYWx0aW1lQWdlbnQgZXh0ZW5kcyBBZ2VudCB7XG4gICAgLyoqXG4gICAgICogVGhlIHZvaWNlIGludGVuZGVkIHRvIGJlIHVzZWQgYnkgdGhlIGFnZW50LiBJZiBhbm90aGVyIGFnZW50IGFscmVhZHkgc3Bva2UgZHVyaW5nIHRoZVxuICAgICAqIFJlYWx0aW1lU2Vzc2lvbiwgY2hhbmdpbmcgdGhlIHZvaWNlIGR1cmluZyBhIGhhbmRvZmYgd2lsbCBmYWlsLlxuICAgICAqL1xuICAgIHZvaWNlO1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgICAgICBzdXBlcihjb25maWcpO1xuICAgICAgICB0aGlzLnZvaWNlID0gY29uZmlnLnZvaWNlID8/ICdhc2gnO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWx0aW1lQWdlbnQubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/realtimeAgent.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/realtimeSession.mjs":
/*!************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/realtimeSession.mjs ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RealtimeSession: () => (/* binding */ RealtimeSession)\n/* harmony export */ });\n/* harmony import */ var _openai_agents_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @openai/agents-core */ \"(ssr)/./node_modules/.pnpm/@openai+agents-core@0.0.2_ws@8.18.2_zod@3.25.51/node_modules/@openai/agents-core/dist/index.mjs\");\n/* harmony import */ var _openai_agents_core_shims__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @openai/agents-core/_shims */ \"(ssr)/./node_modules/.pnpm/@openai+agents-core@0.0.2_ws@8.18.2_zod@3.25.51/node_modules/@openai/agents-core/dist/shims/shims-node.mjs\");\n/* harmony import */ var _openai_agents_core_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @openai/agents-core/utils */ \"(ssr)/./node_modules/.pnpm/@openai+agents-core@0.0.2_ws@8.18.2_zod@3.25.51/node_modules/@openai/agents-core/dist/utils/index.mjs\");\n/* harmony import */ var _guardrail_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./guardrail.mjs */ \"(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/guardrail.mjs\");\n/* harmony import */ var _openaiRealtimeWebRtc_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./openaiRealtimeWebRtc.mjs */ \"(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/openaiRealtimeWebRtc.mjs\");\n/* harmony import */ var _openaiRealtimeWebsocket_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./openaiRealtimeWebsocket.mjs */ \"(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/openaiRealtimeWebsocket.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/utils.mjs\");\n/* harmony import */ var _logger_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./logger.mjs */ \"(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/logger.mjs\");\n\n\n\n\n\n\n\n\n/**\n * A `RealtimeSession` is the corner piece of building Voice Agents. It's the equivalent of a\n * Runner in text-based agents except that it automatically handles multiple turns by maintaining a\n * connection with the underlying transport layer.\n *\n * The session handles managing the local history copy, executes tools, runs output guardrails, and\n * facilities handoffs.\n *\n * The actual audio handling and generation of model responses is handled by the underlying\n * transport layer. By default if you are using a browser with WebRTC support, the session will\n * automatically use the WebRTC version of the OpenAI Realtime API. On the server or if you pass\n * `websocket` as the transport layer, the session will establish a connection using WebSockets.\n *\n * In the case of WebRTC, in the browser, the transport layer will also automatically configure the\n * microphone and audio output to be used by the session.\n *\n * You can also create a transport layer instance yourself and pass it in to have more control over\n * the configuration or even extend the existing ones. Check out the `TwilioRealtimeTransportLayer`\n * for an example of how to create a custom transport layer.\n *\n * @example\n * ```ts\n * const agent = new RealtimeAgent({\n *   name: 'my-agent',\n *   instructions: 'You are a helpful assistant that can answer questions and help with tasks.',\n * })\n *\n * const session = new RealtimeSession(agent);\n * session.connect({\n *   apiKey: 'your-api-key',\n * });\n * ```\n */\nclass RealtimeSession extends _openai_agents_core_shims__WEBPACK_IMPORTED_MODULE_1__.RuntimeEventEmitter {\n    initialAgent;\n    options;\n    #transport;\n    #currentAgent;\n    #currentTools = [];\n    #context;\n    #outputGuardrails = [];\n    #outputGuardrailSettings;\n    #transcribedTextDeltas = {};\n    #history = [];\n    #shouldIncludeAudioData;\n    constructor(initialAgent, options = {}) {\n        super();\n        this.initialAgent = initialAgent;\n        this.options = options;\n        if ((typeof options.transport === 'undefined' && (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.hasWebRTCSupport)()) ||\n            options.transport === 'webrtc') {\n            this.#transport = new _openaiRealtimeWebRtc_mjs__WEBPACK_IMPORTED_MODULE_4__.OpenAIRealtimeWebRTC();\n        }\n        else if (options.transport === 'websocket' ||\n            typeof options.transport === 'undefined') {\n            this.#transport = new _openaiRealtimeWebsocket_mjs__WEBPACK_IMPORTED_MODULE_5__.OpenAIRealtimeWebSocket();\n        }\n        else {\n            this.#transport = options.transport;\n        }\n        this.#currentAgent = initialAgent;\n        this.#context = new _openai_agents_core__WEBPACK_IMPORTED_MODULE_0__.RunContext({\n            ...(options.context ?? {}),\n            history: this.#history,\n        });\n        this.#outputGuardrails = (options.outputGuardrails ?? []).map(_guardrail_mjs__WEBPACK_IMPORTED_MODULE_3__.defineRealtimeOutputGuardrail);\n        this.#outputGuardrailSettings = (0,_guardrail_mjs__WEBPACK_IMPORTED_MODULE_3__.getRealtimeGuardrailSettings)(options.outputGuardrailSettings ?? {});\n        this.#shouldIncludeAudioData = options.historyStoreAudio ?? false;\n    }\n    /**\n     * The transport layer used by the session.\n     */\n    get transport() {\n        return this.#transport;\n    }\n    /**\n     * The current agent in the session.\n     */\n    get currentAgent() {\n        return this.#currentAgent;\n    }\n    /**\n     * The current usage of the session.\n     */\n    get usage() {\n        return this.#context.usage;\n    }\n    /**\n     * The current context of the session.\n     */\n    get context() {\n        return this.#context;\n    }\n    /**\n     * Whether the session is muted. Might be `null` if the underlying transport layer does not\n     * support muting.\n     */\n    get muted() {\n        return this.#transport.muted;\n    }\n    /**\n     * The history of the session.\n     */\n    get history() {\n        return this.#history;\n    }\n    async #setCurrentAgent(agent) {\n        this.#currentAgent = agent;\n        const handoffs = this.#currentAgent.handoffs.map(_openai_agents_core__WEBPACK_IMPORTED_MODULE_0__.getHandoff);\n        const handoffTools = handoffs.map((handoff) => handoff.getHandoffAsFunctionTool());\n        this.#currentTools = [\n            ...(await this.#currentAgent.getAllTools()).filter((tool) => tool.type === 'function'),\n            ...handoffTools,\n        ];\n    }\n    async #getSessionConfig(additionalConfig = {}) {\n        const instructions = await this.#currentAgent.getSystemPrompt(this.#context);\n        const tracingConfig = this.options\n            .tracingDisabled\n            ? null\n            : this.options.workflowName\n                ? {\n                    workflow_name: this.options.workflowName,\n                }\n                : 'auto';\n        if (tracingConfig !== null && tracingConfig !== 'auto') {\n            if (this.options.groupId) {\n                tracingConfig.group_id = this.options.groupId;\n            }\n            if (this.options.traceMetadata) {\n                tracingConfig.metadata = this.options.traceMetadata;\n            }\n        }\n        else if (this.options.groupId || this.options.traceMetadata) {\n            _logger_mjs__WEBPACK_IMPORTED_MODULE_7__[\"default\"].warn('In order to set traceMetadata or a groupId you need to specify a workflowName.');\n        }\n        return {\n            instructions,\n            voice: this.#currentAgent.voice,\n            model: this.options.model,\n            tools: this.#currentTools,\n            tracing: tracingConfig,\n            ...additionalConfig,\n        };\n    }\n    async updateAgent(newAgent) {\n        this.#currentAgent.emit('agent_handoff', this.#context, newAgent);\n        this.emit('agent_handoff', this.#context, this.#currentAgent, newAgent);\n        await this.#setCurrentAgent(newAgent);\n        await this.#transport.updateSessionConfig(await this.#getSessionConfig());\n        return newAgent;\n    }\n    async #handleHandoff(toolCall, handoff) {\n        const newAgent = (await handoff.onInvokeHandoff(this.#context, toolCall.arguments));\n        this.#currentAgent.emit('agent_handoff', this.#context, newAgent);\n        this.emit('agent_handoff', this.#context, this.#currentAgent, newAgent);\n        // update session with new agent\n        await this.#setCurrentAgent(newAgent);\n        await this.#transport.updateSessionConfig(await this.#getSessionConfig());\n        const output = (0,_openai_agents_core__WEBPACK_IMPORTED_MODULE_0__.getTransferMessage)(newAgent);\n        this.#transport.sendFunctionCallOutput(toolCall, output, true);\n        return newAgent;\n    }\n    async #handleFunctionToolCall(toolCall, tool) {\n        this.#context.context.history = JSON.parse(JSON.stringify(this.#history)); // deep copy of the history\n        let parsedArgs = toolCall.arguments;\n        if (tool.parameters) {\n            if ((0,_openai_agents_core_utils__WEBPACK_IMPORTED_MODULE_2__.isZodObject)(tool.parameters)) {\n                parsedArgs = tool.parameters.parse(parsedArgs);\n            }\n            else {\n                parsedArgs = JSON.parse(parsedArgs);\n            }\n        }\n        const needsApproval = await tool.needsApproval(this.#context, parsedArgs, toolCall.callId);\n        if (needsApproval) {\n            const approval = this.context.isToolApproved({\n                toolName: tool.name,\n                callId: toolCall.callId,\n            });\n            if (approval === false) {\n                this.emit('agent_tool_start', this.#context, this.#currentAgent, tool);\n                this.#currentAgent.emit('agent_tool_start', this.#context, tool);\n                const result = 'Tool execution was not approved.';\n                this.#transport.sendFunctionCallOutput(toolCall, result, true);\n                this.emit('agent_tool_end', this.#context, this.#currentAgent, tool, result);\n                this.#currentAgent.emit('agent_tool_end', this.#context, tool, result);\n                return;\n            }\n            else if (typeof approval === 'undefined') {\n                this.emit('tool_approval_requested', this.#context, this.#currentAgent, {\n                    type: 'function_approval',\n                    tool,\n                    approvalItem: new _openai_agents_core__WEBPACK_IMPORTED_MODULE_0__.RunToolApprovalItem(toolCall, this.#currentAgent),\n                });\n                return;\n            }\n        }\n        this.emit('agent_tool_start', this.#context, this.#currentAgent, tool);\n        this.#currentAgent.emit('agent_tool_start', this.#context, tool);\n        this.#context.context.history = JSON.parse(JSON.stringify(this.#history)); // deep copy of the history\n        const result = await tool.invoke(this.#context, toolCall.arguments);\n        const stringResult = (0,_openai_agents_core_utils__WEBPACK_IMPORTED_MODULE_2__.toSmartString)(result);\n        this.#transport.sendFunctionCallOutput(toolCall, stringResult, true);\n        this.emit('agent_tool_end', this.#context, this.#currentAgent, tool, stringResult);\n        this.#currentAgent.emit('agent_tool_end', this.#context, tool, stringResult);\n    }\n    async #handleFunctionCall(toolCall) {\n        const handoffMap = new Map(this.#currentAgent.handoffs\n            .map(_openai_agents_core__WEBPACK_IMPORTED_MODULE_0__.getHandoff)\n            .map((handoff) => [handoff.toolName, handoff]));\n        const functionToolMap = new Map((await this.#currentAgent.getAllTools()).map((tool) => [tool.name, tool]));\n        const possibleHandoff = handoffMap.get(toolCall.name);\n        if (possibleHandoff) {\n            await this.#handleHandoff(toolCall, possibleHandoff);\n        }\n        else {\n            const functionTool = functionToolMap.get(toolCall.name);\n            if (functionTool && functionTool.type === 'function') {\n                await this.#handleFunctionToolCall(toolCall, functionTool);\n            }\n            else {\n                throw new _openai_agents_core__WEBPACK_IMPORTED_MODULE_0__.ModelBehaviorError(`Tool ${toolCall.name} not found`);\n            }\n        }\n    }\n    async #runOutputGuardrails(output) {\n        if (this.#outputGuardrails.length === 0) {\n            return;\n        }\n        const guardrailArgs = {\n            agent: this.#currentAgent,\n            agentOutput: output,\n            context: this.#context,\n        };\n        const results = await Promise.all(this.#outputGuardrails.map((guardrail) => guardrail.run(guardrailArgs)));\n        for (const result of results) {\n            if (result.output.tripwireTriggered) {\n                const error = new _openai_agents_core__WEBPACK_IMPORTED_MODULE_0__.OutputGuardrailTripwireTriggered(`Output guardrail triggered: ${JSON.stringify(result.output.outputInfo)}`, result);\n                this.emit('guardrail_tripped', this.#context, this.#currentAgent, error);\n                this.interrupt();\n                const feedbackText = (0,_guardrail_mjs__WEBPACK_IMPORTED_MODULE_3__.getRealtimeGuardrailFeedbackMessage)(result);\n                this.sendMessage(feedbackText);\n                break;\n            }\n        }\n    }\n    #setEventListeners() {\n        this.#transport.on('*', (event) => {\n            this.emit('transport_event', event);\n        });\n        this.#transport.on('audio', (event) => {\n            this.emit('audio', event);\n        });\n        this.#transport.on('turn_started', () => {\n            this.emit('agent_start', this.#context, this.#currentAgent);\n            this.#currentAgent.emit('agent_start', this.#context, this.#currentAgent);\n        });\n        this.#transport.on('turn_done', (event) => {\n            const item = event.response.output[event.response.output.length - 1];\n            const textOutput = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.getLastTextFromAudioOutputMessage)(item) ?? '';\n            this.emit('agent_end', this.#context, this.#currentAgent, textOutput);\n            this.#currentAgent.emit('agent_end', this.#context, textOutput);\n            this.#runOutputGuardrails(textOutput);\n        });\n        this.#transport.on('audio_done', () => {\n            this.emit('audio_stopped', this.#context, this.#currentAgent);\n        });\n        let lastRunIndex = 0;\n        let lastItemId;\n        this.#transport.on('audio_transcript_delta', (event) => {\n            try {\n                const delta = event.delta;\n                const itemId = event.itemId;\n                if (lastItemId !== itemId) {\n                    lastItemId = itemId;\n                    lastRunIndex = 0;\n                }\n                const currentText = this.#transcribedTextDeltas[itemId] ?? '';\n                const newText = currentText + delta;\n                this.#transcribedTextDeltas[itemId] = newText;\n                if (this.#outputGuardrailSettings.debounceTextLength < 0) {\n                    return;\n                }\n                const newRunIndex = Math.floor(newText.length / this.#outputGuardrailSettings.debounceTextLength);\n                if (newRunIndex > lastRunIndex) {\n                    lastRunIndex = newRunIndex;\n                    // We don't cancel existing runs because we want the first one to fail to fail\n                    // The transport layer should upon failure handle the interruption and stop the model\n                    // from generating further\n                    this.#runOutputGuardrails(newText);\n                }\n            }\n            catch (err) {\n                this.emit('error', {\n                    type: 'error',\n                    error: err,\n                });\n            }\n        });\n        this.#transport.on('item_update', (event) => {\n            try {\n                const isNew = !this.#history.some((item) => item.itemId === event.itemId);\n                this.#history = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.updateRealtimeHistory)(this.#history, event, this.#shouldIncludeAudioData);\n                this.#context.context.history = this.#history;\n                if (isNew) {\n                    const addedItem = this.#history.find((item) => item.itemId === event.itemId);\n                    if (addedItem) {\n                        this.emit('history_added', addedItem);\n                    }\n                }\n                this.emit('history_updated', this.#history);\n            }\n            catch (err) {\n                this.emit('error', {\n                    type: 'error',\n                    error: err,\n                });\n            }\n        });\n        this.#transport.on('item_deleted', (event) => {\n            try {\n                this.#history = this.#history.filter((item) => item.itemId !== event.itemId);\n                this.#context.context.history = this.#history;\n                this.emit('history_updated', this.#history);\n            }\n            catch (err) {\n                this.emit('error', {\n                    type: 'error',\n                    error: err,\n                });\n            }\n        });\n        this.#transport.on('function_call', async (event) => {\n            try {\n                await this.#handleFunctionCall(event);\n            }\n            catch (error) {\n                _logger_mjs__WEBPACK_IMPORTED_MODULE_7__[\"default\"].error('Error handling function call', error);\n                this.emit('error', {\n                    type: 'error',\n                    error,\n                });\n            }\n        });\n        this.#transport.on('usage_update', (usage) => {\n            this.#context.usage.add(usage);\n        });\n        this.#transport.on('audio_interrupted', () => {\n            this.emit('audio_interrupted', this.#context, this.#currentAgent);\n        });\n        this.#transport.on('error', (error) => {\n            this.emit('error', error);\n        });\n    }\n    /**\n     * Connect to the session. This will establish the connection to the underlying transport layer\n     * and start the session.\n     *\n     * After connecting, the session will also emit a `history_updated` event with an empty history.\n     *\n     * @param options - The options for the connection.\n     */\n    async connect(options) {\n        // makes sure the current agent is correctly set and loads the tools\n        await this.#setCurrentAgent(this.initialAgent);\n        this.#setEventListeners();\n        await this.#transport.connect({\n            apiKey: options.apiKey ?? this.options.apiKey,\n            model: this.options.model,\n            initialSessionConfig: await this.#getSessionConfig(this.options.config),\n        });\n        this.#history = [];\n        this.emit('history_updated', this.#history);\n    }\n    /**\n     * Update the history of the session.\n     * @param newHistory - The new history to set.\n     */\n    updateHistory(newHistory) {\n        let updatedHistory;\n        if (typeof newHistory === 'function') {\n            updatedHistory = newHistory(this.#history);\n        }\n        else {\n            updatedHistory = newHistory;\n        }\n        this.#transport.resetHistory(this.#history, updatedHistory);\n    }\n    /**\n     * Send a message to the session.\n     * @param message - The message to send.\n     * @param otherEventData - Additional event data to send.\n     */\n    sendMessage(message, otherEventData = {}) {\n        this.#transport.sendMessage(message, otherEventData);\n    }\n    /**\n     * Mute the session.\n     * @param muted - Whether to mute the session.\n     */\n    mute(muted) {\n        this.#transport.mute(muted);\n    }\n    /**\n     * Disconnect from the session.\n     */\n    close() {\n        this.#transport.close();\n    }\n    /**\n     * Send audio to the session.\n     * @param audio - The audio to send.\n     * @param options - Additional options.\n     * @param options.commit - Whether to finish the turn with this audio.\n     */\n    sendAudio(audio, options = {}) {\n        this.#transport.sendAudio(audio, options);\n    }\n    /**\n     * Interrupt the session artificially for example if you want to build a \"stop talking\"\n     * button.\n     */\n    interrupt() {\n        this.#transport.interrupt();\n    }\n    /**\n     * Approve a tool call. This will also trigger the tool call to the agent.\n     * @param approvalItem - The approval item to approve.\n     * @param options - Additional options.\n     * @param options.alwaysApprove - Whether to always approve the tool call.\n     */\n    async approve(approvalItem, options = { alwaysApprove: false }) {\n        this.#context.approveTool(approvalItem, options);\n        const tool = this.#currentAgent.tools.find((tool) => tool.name === approvalItem.rawItem.name);\n        if (tool && tool.type === 'function') {\n            await this.#handleFunctionToolCall(approvalItem.rawItem, tool);\n        }\n        else {\n            throw new _openai_agents_core__WEBPACK_IMPORTED_MODULE_0__.ModelBehaviorError(`Tool ${approvalItem.rawItem.name} not found`);\n        }\n    }\n    /**\n     * Reject a tool call. This will also trigger the tool call to the agent.\n     * @param approvalItem - The approval item to reject.\n     * @param options - Additional options.\n     * @param options.alwaysReject - Whether to always reject the tool call.\n     */\n    async reject(approvalItem, options = { alwaysReject: false }) {\n        this.#context.rejectTool(approvalItem, options);\n        // we still need to simulate a tool call to the agent to let the agent know\n        const tool = this.#currentAgent.tools.find((tool) => tool.name === approvalItem.rawItem.name);\n        if (tool && tool.type === 'function') {\n            await this.#handleFunctionToolCall(approvalItem.rawItem, tool);\n        }\n        else {\n            throw new _openai_agents_core__WEBPACK_IMPORTED_MODULE_0__.ModelBehaviorError(`Tool ${approvalItem.rawItem.name} not found`);\n        }\n    }\n}\n//# sourceMappingURL=realtimeSession.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/realtimeSession.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/shims/shims-node.mjs":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/shims/shims-node.mjs ***!
  \*************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebSocket: () => (/* reexport safe */ ws__WEBPACK_IMPORTED_MODULE_0__.WebSocket),\n/* harmony export */   isBrowserEnvironment: () => (/* binding */ isBrowserEnvironment)\n/* harmony export */ });\n/* harmony import */ var ws__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ws */ \"(ssr)/./node_modules/.pnpm/ws@8.18.2/node_modules/ws/wrapper.mjs\");\n\nfunction isBrowserEnvironment() {\n    return false;\n}\n//# sourceMappingURL=shims-node.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW5haSthZ2VudHMtcmVhbHRpbWVAMC4wLjJfem9kQDMuMjUuNTEvbm9kZV9tb2R1bGVzL0BvcGVuYWkvYWdlbnRzLXJlYWx0aW1lL2Rpc3Qvc2hpbXMvc2hpbXMtbm9kZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQStCO0FBQ3hCO0FBQ1A7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmFpbnl0dy8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbmFpK2FnZW50cy1yZWFsdGltZUAwLjAuMl96b2RAMy4yNS41MS9ub2RlX21vZHVsZXMvQG9wZW5haS9hZ2VudHMtcmVhbHRpbWUvZGlzdC9zaGltcy9zaGltcy1ub2RlLm1qcz82ZTMxIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IFdlYlNvY2tldCB9IGZyb20gJ3dzJztcbmV4cG9ydCBmdW5jdGlvbiBpc0Jyb3dzZXJFbnZpcm9ubWVudCgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGltcy1ub2RlLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/shims/shims-node.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/utils.mjs":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/utils.mjs ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HEADERS: () => (/* binding */ HEADERS),\n/* harmony export */   WEBSOCKET_META: () => (/* binding */ WEBSOCKET_META),\n/* harmony export */   arrayBufferToBase64: () => (/* binding */ arrayBufferToBase64),\n/* harmony export */   base64ToArrayBuffer: () => (/* binding */ base64ToArrayBuffer),\n/* harmony export */   diffRealtimeHistory: () => (/* binding */ diffRealtimeHistory),\n/* harmony export */   getLastTextFromAudioOutputMessage: () => (/* binding */ getLastTextFromAudioOutputMessage),\n/* harmony export */   hasWebRTCSupport: () => (/* binding */ hasWebRTCSupport),\n/* harmony export */   removeAudioFromContent: () => (/* binding */ removeAudioFromContent),\n/* harmony export */   updateRealtimeHistory: () => (/* binding */ updateRealtimeHistory)\n/* harmony export */ });\n/* harmony import */ var _metadata_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./metadata.mjs */ \"(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/metadata.mjs\");\n\n/**\n * Converts a base64 string to an ArrayBuffer\n * @param {string} base64\n * @returns {ArrayBuffer}\n */\nfunction base64ToArrayBuffer(base64) {\n    const binaryString = atob(base64);\n    const len = binaryString.length;\n    const bytes = new Uint8Array(len);\n    for (let i = 0; i < len; i++) {\n        bytes[i] = binaryString.charCodeAt(i);\n    }\n    return bytes.buffer;\n}\n/**\n * Converts an ArrayBuffer to a base64 string\n * @param {ArrayBuffer} arrayBuffer\n * @returns {string}\n */\nfunction arrayBufferToBase64(arrayBuffer) {\n    const binaryString = String.fromCharCode(...new Uint8Array(arrayBuffer));\n    return btoa(binaryString);\n}\n/**\n * Get the last text from an audio output message\n * @param item\n * @returns\n */\nfunction getLastTextFromAudioOutputMessage(item) {\n    if (typeof item === 'undefined' ||\n        item === null ||\n        typeof item !== 'object' ||\n        !('type' in item) ||\n        typeof item.type !== 'string' ||\n        !item.type) {\n        return undefined;\n    }\n    if (item.type !== 'message') {\n        return undefined;\n    }\n    if (!('content' in item) ||\n        !Array.isArray(item.content) ||\n        item.content.length < 1) {\n        return undefined;\n    }\n    const lastContentItem = item.content[item.content.length - 1];\n    if (!('type' in lastContentItem) ||\n        typeof lastContentItem.type !== 'string') {\n        return undefined;\n    }\n    if (lastContentItem.type === 'text') {\n        return typeof lastContentItem.text === 'string'\n            ? lastContentItem.text\n            : undefined;\n    }\n    if (lastContentItem.type === 'audio') {\n        return typeof lastContentItem.transcript === 'string'\n            ? lastContentItem.transcript\n            : undefined;\n    }\n    return undefined;\n}\n/**\n * Compare two conversation histories to determine the removals, additions, and updates.\n * @param oldHistory - The old history.\n * @param newHistory - The new history.\n * @returns A diff of the two histories.\n */\nfunction diffRealtimeHistory(oldHistory, newHistory) {\n    const removals = oldHistory.filter((item) => !newHistory.some((newItem) => newItem.itemId === item.itemId));\n    const additions = newHistory.filter((item) => !oldHistory.some((oldItem) => oldItem.itemId === item.itemId));\n    const updates = newHistory.filter((item) => oldHistory.some((oldItem) => oldItem.itemId === item.itemId &&\n        JSON.stringify(oldItem) !== JSON.stringify(item)));\n    return {\n        removals,\n        additions,\n        updates,\n    };\n}\n/**\n * Check if the browser supports WebRTC.\n * @returns True if WebRTC is supported, false otherwise.\n */\nfunction hasWebRTCSupport() {\n    if (typeof window === 'undefined') {\n        return false;\n    }\n    return typeof window['RTCPeerConnection'] !== 'undefined';\n}\n/**\n * Removes the audio data from all content in a message by setting it to null.\n * @param item\n * @returns\n */\nfunction removeAudioFromContent(item) {\n    if (item.role === 'system') {\n        return item;\n    }\n    if (item.role === 'assistant') {\n        return {\n            ...item,\n            content: item.content.map((entry) => {\n                if (entry.type === 'audio') {\n                    return {\n                        ...entry,\n                        audio: null,\n                    };\n                }\n                return entry;\n            }),\n        };\n    }\n    if (item.role === 'user') {\n        return {\n            ...item,\n            content: item.content.map((entry) => {\n                if (entry.type === 'input_audio') {\n                    return {\n                        ...entry,\n                        audio: null,\n                    };\n                }\n                return entry;\n            }),\n        };\n    }\n    return item;\n}\n/**\n * Updates the realtime history array based on the incoming event and options.\n * @param history - The current history array.\n * @param event - The event to process (RealtimeItem).\n * @param shouldIncludeAudioData - Whether to include audio data in message items.\n * @returns The updated history array.\n */\nfunction updateRealtimeHistory(history, event, shouldIncludeAudioData) {\n    const newEvent = !shouldIncludeAudioData && event.type === 'message'\n        ? removeAudioFromContent(event)\n        : event;\n    const existingIndex = history.findIndex((item) => item.itemId === event.itemId);\n    if (existingIndex !== -1) {\n        // Update existing item\n        return history.map((item, idx) => {\n            if (idx === existingIndex) {\n                return newEvent;\n            }\n            if (!shouldIncludeAudioData && item.type === 'message') {\n                return removeAudioFromContent(item);\n            }\n            return item;\n        });\n    }\n    else if (event.previousItemId) {\n        // Insert after previousItemId if found, else at end\n        const prevIndex = history.findIndex((item) => item.itemId === event.previousItemId);\n        if (prevIndex !== -1) {\n            return [\n                ...history.slice(0, prevIndex + 1),\n                newEvent,\n                ...history.slice(prevIndex + 1),\n            ];\n        }\n        else {\n            return [...history, newEvent];\n        }\n    }\n    else {\n        return [...history, newEvent];\n    }\n}\n/**\n * The headers to use for the Realtime API.\n */\nconst HEADERS = {\n    'User-Agent': `Agents/JavaScript ${_metadata_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].version}`,\n    'X-OpenAI-Agents-SDK': `openai-agents-sdk.${_metadata_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].version}`,\n};\n/**\n * Browser websocket header\n */\nconst WEBSOCKET_META = `openai-agents-sdk.${_metadata_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].version}`;\n//# sourceMappingURL=utils.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@openai+agents-realtime@0.0.2_zod@3.25.51/node_modules/@openai/agents-realtime/dist/utils.mjs\n");

/***/ })

};
;